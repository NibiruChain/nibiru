// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package oraclev1

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Params_4_list)(nil)

type _Params_4_list struct {
	list *[]string
}

func (x *_Params_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Params_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Params_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_4_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Params at list field Whitelist as it is not of Message kind"))
}

func (x *_Params_4_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Params_4_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Params_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Params                      protoreflect.MessageDescriptor
	fd_Params_vote_period          protoreflect.FieldDescriptor
	fd_Params_vote_threshold       protoreflect.FieldDescriptor
	fd_Params_reward_band          protoreflect.FieldDescriptor
	fd_Params_whitelist            protoreflect.FieldDescriptor
	fd_Params_slash_fraction       protoreflect.FieldDescriptor
	fd_Params_slash_window         protoreflect.FieldDescriptor
	fd_Params_min_valid_per_window protoreflect.FieldDescriptor
	fd_Params_twap_lookback_window protoreflect.FieldDescriptor
	fd_Params_min_voters           protoreflect.FieldDescriptor
	fd_Params_validator_fee_ratio  protoreflect.FieldDescriptor
	fd_Params_expiration_blocks    protoreflect.FieldDescriptor
)

func init() {
	file_nibiru_oracle_v1_oracle_proto_init()
	md_Params = File_nibiru_oracle_v1_oracle_proto.Messages().ByName("Params")
	fd_Params_vote_period = md_Params.Fields().ByName("vote_period")
	fd_Params_vote_threshold = md_Params.Fields().ByName("vote_threshold")
	fd_Params_reward_band = md_Params.Fields().ByName("reward_band")
	fd_Params_whitelist = md_Params.Fields().ByName("whitelist")
	fd_Params_slash_fraction = md_Params.Fields().ByName("slash_fraction")
	fd_Params_slash_window = md_Params.Fields().ByName("slash_window")
	fd_Params_min_valid_per_window = md_Params.Fields().ByName("min_valid_per_window")
	fd_Params_twap_lookback_window = md_Params.Fields().ByName("twap_lookback_window")
	fd_Params_min_voters = md_Params.Fields().ByName("min_voters")
	fd_Params_validator_fee_ratio = md_Params.Fields().ByName("validator_fee_ratio")
	fd_Params_expiration_blocks = md_Params.Fields().ByName("expiration_blocks")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_nibiru_oracle_v1_oracle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.VotePeriod != uint64(0) {
		value := protoreflect.ValueOfUint64(x.VotePeriod)
		if !f(fd_Params_vote_period, value) {
			return
		}
	}
	if x.VoteThreshold != "" {
		value := protoreflect.ValueOfString(x.VoteThreshold)
		if !f(fd_Params_vote_threshold, value) {
			return
		}
	}
	if x.RewardBand != "" {
		value := protoreflect.ValueOfString(x.RewardBand)
		if !f(fd_Params_reward_band, value) {
			return
		}
	}
	if len(x.Whitelist) != 0 {
		value := protoreflect.ValueOfList(&_Params_4_list{list: &x.Whitelist})
		if !f(fd_Params_whitelist, value) {
			return
		}
	}
	if x.SlashFraction != "" {
		value := protoreflect.ValueOfString(x.SlashFraction)
		if !f(fd_Params_slash_fraction, value) {
			return
		}
	}
	if x.SlashWindow != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SlashWindow)
		if !f(fd_Params_slash_window, value) {
			return
		}
	}
	if x.MinValidPerWindow != "" {
		value := protoreflect.ValueOfString(x.MinValidPerWindow)
		if !f(fd_Params_min_valid_per_window, value) {
			return
		}
	}
	if x.TwapLookbackWindow != nil {
		value := protoreflect.ValueOfMessage(x.TwapLookbackWindow.ProtoReflect())
		if !f(fd_Params_twap_lookback_window, value) {
			return
		}
	}
	if x.MinVoters != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MinVoters)
		if !f(fd_Params_min_voters, value) {
			return
		}
	}
	if x.ValidatorFeeRatio != "" {
		value := protoreflect.ValueOfString(x.ValidatorFeeRatio)
		if !f(fd_Params_validator_fee_ratio, value) {
			return
		}
	}
	if x.ExpirationBlocks != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ExpirationBlocks)
		if !f(fd_Params_expiration_blocks, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nibiru.oracle.v1.Params.vote_period":
		return x.VotePeriod != uint64(0)
	case "nibiru.oracle.v1.Params.vote_threshold":
		return x.VoteThreshold != ""
	case "nibiru.oracle.v1.Params.reward_band":
		return x.RewardBand != ""
	case "nibiru.oracle.v1.Params.whitelist":
		return len(x.Whitelist) != 0
	case "nibiru.oracle.v1.Params.slash_fraction":
		return x.SlashFraction != ""
	case "nibiru.oracle.v1.Params.slash_window":
		return x.SlashWindow != uint64(0)
	case "nibiru.oracle.v1.Params.min_valid_per_window":
		return x.MinValidPerWindow != ""
	case "nibiru.oracle.v1.Params.twap_lookback_window":
		return x.TwapLookbackWindow != nil
	case "nibiru.oracle.v1.Params.min_voters":
		return x.MinVoters != uint64(0)
	case "nibiru.oracle.v1.Params.validator_fee_ratio":
		return x.ValidatorFeeRatio != ""
	case "nibiru.oracle.v1.Params.expiration_blocks":
		return x.ExpirationBlocks != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.Params"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nibiru.oracle.v1.Params.vote_period":
		x.VotePeriod = uint64(0)
	case "nibiru.oracle.v1.Params.vote_threshold":
		x.VoteThreshold = ""
	case "nibiru.oracle.v1.Params.reward_band":
		x.RewardBand = ""
	case "nibiru.oracle.v1.Params.whitelist":
		x.Whitelist = nil
	case "nibiru.oracle.v1.Params.slash_fraction":
		x.SlashFraction = ""
	case "nibiru.oracle.v1.Params.slash_window":
		x.SlashWindow = uint64(0)
	case "nibiru.oracle.v1.Params.min_valid_per_window":
		x.MinValidPerWindow = ""
	case "nibiru.oracle.v1.Params.twap_lookback_window":
		x.TwapLookbackWindow = nil
	case "nibiru.oracle.v1.Params.min_voters":
		x.MinVoters = uint64(0)
	case "nibiru.oracle.v1.Params.validator_fee_ratio":
		x.ValidatorFeeRatio = ""
	case "nibiru.oracle.v1.Params.expiration_blocks":
		x.ExpirationBlocks = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.Params"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nibiru.oracle.v1.Params.vote_period":
		value := x.VotePeriod
		return protoreflect.ValueOfUint64(value)
	case "nibiru.oracle.v1.Params.vote_threshold":
		value := x.VoteThreshold
		return protoreflect.ValueOfString(value)
	case "nibiru.oracle.v1.Params.reward_band":
		value := x.RewardBand
		return protoreflect.ValueOfString(value)
	case "nibiru.oracle.v1.Params.whitelist":
		if len(x.Whitelist) == 0 {
			return protoreflect.ValueOfList(&_Params_4_list{})
		}
		listValue := &_Params_4_list{list: &x.Whitelist}
		return protoreflect.ValueOfList(listValue)
	case "nibiru.oracle.v1.Params.slash_fraction":
		value := x.SlashFraction
		return protoreflect.ValueOfString(value)
	case "nibiru.oracle.v1.Params.slash_window":
		value := x.SlashWindow
		return protoreflect.ValueOfUint64(value)
	case "nibiru.oracle.v1.Params.min_valid_per_window":
		value := x.MinValidPerWindow
		return protoreflect.ValueOfString(value)
	case "nibiru.oracle.v1.Params.twap_lookback_window":
		value := x.TwapLookbackWindow
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "nibiru.oracle.v1.Params.min_voters":
		value := x.MinVoters
		return protoreflect.ValueOfUint64(value)
	case "nibiru.oracle.v1.Params.validator_fee_ratio":
		value := x.ValidatorFeeRatio
		return protoreflect.ValueOfString(value)
	case "nibiru.oracle.v1.Params.expiration_blocks":
		value := x.ExpirationBlocks
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.Params"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nibiru.oracle.v1.Params.vote_period":
		x.VotePeriod = value.Uint()
	case "nibiru.oracle.v1.Params.vote_threshold":
		x.VoteThreshold = value.Interface().(string)
	case "nibiru.oracle.v1.Params.reward_band":
		x.RewardBand = value.Interface().(string)
	case "nibiru.oracle.v1.Params.whitelist":
		lv := value.List()
		clv := lv.(*_Params_4_list)
		x.Whitelist = *clv.list
	case "nibiru.oracle.v1.Params.slash_fraction":
		x.SlashFraction = value.Interface().(string)
	case "nibiru.oracle.v1.Params.slash_window":
		x.SlashWindow = value.Uint()
	case "nibiru.oracle.v1.Params.min_valid_per_window":
		x.MinValidPerWindow = value.Interface().(string)
	case "nibiru.oracle.v1.Params.twap_lookback_window":
		x.TwapLookbackWindow = value.Message().Interface().(*durationpb.Duration)
	case "nibiru.oracle.v1.Params.min_voters":
		x.MinVoters = value.Uint()
	case "nibiru.oracle.v1.Params.validator_fee_ratio":
		x.ValidatorFeeRatio = value.Interface().(string)
	case "nibiru.oracle.v1.Params.expiration_blocks":
		x.ExpirationBlocks = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.Params"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nibiru.oracle.v1.Params.whitelist":
		if x.Whitelist == nil {
			x.Whitelist = []string{}
		}
		value := &_Params_4_list{list: &x.Whitelist}
		return protoreflect.ValueOfList(value)
	case "nibiru.oracle.v1.Params.twap_lookback_window":
		if x.TwapLookbackWindow == nil {
			x.TwapLookbackWindow = new(durationpb.Duration)
		}
		return protoreflect.ValueOfMessage(x.TwapLookbackWindow.ProtoReflect())
	case "nibiru.oracle.v1.Params.vote_period":
		panic(fmt.Errorf("field vote_period of message nibiru.oracle.v1.Params is not mutable"))
	case "nibiru.oracle.v1.Params.vote_threshold":
		panic(fmt.Errorf("field vote_threshold of message nibiru.oracle.v1.Params is not mutable"))
	case "nibiru.oracle.v1.Params.reward_band":
		panic(fmt.Errorf("field reward_band of message nibiru.oracle.v1.Params is not mutable"))
	case "nibiru.oracle.v1.Params.slash_fraction":
		panic(fmt.Errorf("field slash_fraction of message nibiru.oracle.v1.Params is not mutable"))
	case "nibiru.oracle.v1.Params.slash_window":
		panic(fmt.Errorf("field slash_window of message nibiru.oracle.v1.Params is not mutable"))
	case "nibiru.oracle.v1.Params.min_valid_per_window":
		panic(fmt.Errorf("field min_valid_per_window of message nibiru.oracle.v1.Params is not mutable"))
	case "nibiru.oracle.v1.Params.min_voters":
		panic(fmt.Errorf("field min_voters of message nibiru.oracle.v1.Params is not mutable"))
	case "nibiru.oracle.v1.Params.validator_fee_ratio":
		panic(fmt.Errorf("field validator_fee_ratio of message nibiru.oracle.v1.Params is not mutable"))
	case "nibiru.oracle.v1.Params.expiration_blocks":
		panic(fmt.Errorf("field expiration_blocks of message nibiru.oracle.v1.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.Params"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nibiru.oracle.v1.Params.vote_period":
		return protoreflect.ValueOfUint64(uint64(0))
	case "nibiru.oracle.v1.Params.vote_threshold":
		return protoreflect.ValueOfString("")
	case "nibiru.oracle.v1.Params.reward_band":
		return protoreflect.ValueOfString("")
	case "nibiru.oracle.v1.Params.whitelist":
		list := []string{}
		return protoreflect.ValueOfList(&_Params_4_list{list: &list})
	case "nibiru.oracle.v1.Params.slash_fraction":
		return protoreflect.ValueOfString("")
	case "nibiru.oracle.v1.Params.slash_window":
		return protoreflect.ValueOfUint64(uint64(0))
	case "nibiru.oracle.v1.Params.min_valid_per_window":
		return protoreflect.ValueOfString("")
	case "nibiru.oracle.v1.Params.twap_lookback_window":
		m := new(durationpb.Duration)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "nibiru.oracle.v1.Params.min_voters":
		return protoreflect.ValueOfUint64(uint64(0))
	case "nibiru.oracle.v1.Params.validator_fee_ratio":
		return protoreflect.ValueOfString("")
	case "nibiru.oracle.v1.Params.expiration_blocks":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.Params"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nibiru.oracle.v1.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.VotePeriod != 0 {
			n += 1 + runtime.Sov(uint64(x.VotePeriod))
		}
		l = len(x.VoteThreshold)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RewardBand)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Whitelist) > 0 {
			for _, s := range x.Whitelist {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.SlashFraction)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SlashWindow != 0 {
			n += 1 + runtime.Sov(uint64(x.SlashWindow))
		}
		l = len(x.MinValidPerWindow)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TwapLookbackWindow != nil {
			l = options.Size(x.TwapLookbackWindow)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MinVoters != 0 {
			n += 1 + runtime.Sov(uint64(x.MinVoters))
		}
		l = len(x.ValidatorFeeRatio)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ExpirationBlocks != 0 {
			n += 1 + runtime.Sov(uint64(x.ExpirationBlocks))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ExpirationBlocks != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ExpirationBlocks))
			i--
			dAtA[i] = 0x58
		}
		if len(x.ValidatorFeeRatio) > 0 {
			i -= len(x.ValidatorFeeRatio)
			copy(dAtA[i:], x.ValidatorFeeRatio)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValidatorFeeRatio)))
			i--
			dAtA[i] = 0x52
		}
		if x.MinVoters != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinVoters))
			i--
			dAtA[i] = 0x48
		}
		if x.TwapLookbackWindow != nil {
			encoded, err := options.Marshal(x.TwapLookbackWindow)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.MinValidPerWindow) > 0 {
			i -= len(x.MinValidPerWindow)
			copy(dAtA[i:], x.MinValidPerWindow)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinValidPerWindow)))
			i--
			dAtA[i] = 0x3a
		}
		if x.SlashWindow != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SlashWindow))
			i--
			dAtA[i] = 0x30
		}
		if len(x.SlashFraction) > 0 {
			i -= len(x.SlashFraction)
			copy(dAtA[i:], x.SlashFraction)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SlashFraction)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Whitelist) > 0 {
			for iNdEx := len(x.Whitelist) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Whitelist[iNdEx])
				copy(dAtA[i:], x.Whitelist[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Whitelist[iNdEx])))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.RewardBand) > 0 {
			i -= len(x.RewardBand)
			copy(dAtA[i:], x.RewardBand)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RewardBand)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.VoteThreshold) > 0 {
			i -= len(x.VoteThreshold)
			copy(dAtA[i:], x.VoteThreshold)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.VoteThreshold)))
			i--
			dAtA[i] = 0x12
		}
		if x.VotePeriod != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.VotePeriod))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VotePeriod", wireType)
				}
				x.VotePeriod = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.VotePeriod |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VoteThreshold", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VoteThreshold = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardBand", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardBand = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Whitelist", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Whitelist = append(x.Whitelist, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SlashFraction", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SlashFraction = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SlashWindow", wireType)
				}
				x.SlashWindow = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SlashWindow |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinValidPerWindow", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinValidPerWindow = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TwapLookbackWindow", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TwapLookbackWindow == nil {
					x.TwapLookbackWindow = &durationpb.Duration{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TwapLookbackWindow); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinVoters", wireType)
				}
				x.MinVoters = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinVoters |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidatorFeeRatio", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValidatorFeeRatio = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExpirationBlocks", wireType)
				}
				x.ExpirationBlocks = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ExpirationBlocks |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_AggregateExchangeRatePrevote              protoreflect.MessageDescriptor
	fd_AggregateExchangeRatePrevote_hash         protoreflect.FieldDescriptor
	fd_AggregateExchangeRatePrevote_voter        protoreflect.FieldDescriptor
	fd_AggregateExchangeRatePrevote_submit_block protoreflect.FieldDescriptor
)

func init() {
	file_nibiru_oracle_v1_oracle_proto_init()
	md_AggregateExchangeRatePrevote = File_nibiru_oracle_v1_oracle_proto.Messages().ByName("AggregateExchangeRatePrevote")
	fd_AggregateExchangeRatePrevote_hash = md_AggregateExchangeRatePrevote.Fields().ByName("hash")
	fd_AggregateExchangeRatePrevote_voter = md_AggregateExchangeRatePrevote.Fields().ByName("voter")
	fd_AggregateExchangeRatePrevote_submit_block = md_AggregateExchangeRatePrevote.Fields().ByName("submit_block")
}

var _ protoreflect.Message = (*fastReflection_AggregateExchangeRatePrevote)(nil)

type fastReflection_AggregateExchangeRatePrevote AggregateExchangeRatePrevote

func (x *AggregateExchangeRatePrevote) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AggregateExchangeRatePrevote)(x)
}

func (x *AggregateExchangeRatePrevote) slowProtoReflect() protoreflect.Message {
	mi := &file_nibiru_oracle_v1_oracle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AggregateExchangeRatePrevote_messageType fastReflection_AggregateExchangeRatePrevote_messageType
var _ protoreflect.MessageType = fastReflection_AggregateExchangeRatePrevote_messageType{}

type fastReflection_AggregateExchangeRatePrevote_messageType struct{}

func (x fastReflection_AggregateExchangeRatePrevote_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AggregateExchangeRatePrevote)(nil)
}
func (x fastReflection_AggregateExchangeRatePrevote_messageType) New() protoreflect.Message {
	return new(fastReflection_AggregateExchangeRatePrevote)
}
func (x fastReflection_AggregateExchangeRatePrevote_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AggregateExchangeRatePrevote
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AggregateExchangeRatePrevote) Descriptor() protoreflect.MessageDescriptor {
	return md_AggregateExchangeRatePrevote
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AggregateExchangeRatePrevote) Type() protoreflect.MessageType {
	return _fastReflection_AggregateExchangeRatePrevote_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AggregateExchangeRatePrevote) New() protoreflect.Message {
	return new(fastReflection_AggregateExchangeRatePrevote)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AggregateExchangeRatePrevote) Interface() protoreflect.ProtoMessage {
	return (*AggregateExchangeRatePrevote)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AggregateExchangeRatePrevote) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Hash != "" {
		value := protoreflect.ValueOfString(x.Hash)
		if !f(fd_AggregateExchangeRatePrevote_hash, value) {
			return
		}
	}
	if x.Voter != "" {
		value := protoreflect.ValueOfString(x.Voter)
		if !f(fd_AggregateExchangeRatePrevote_voter, value) {
			return
		}
	}
	if x.SubmitBlock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SubmitBlock)
		if !f(fd_AggregateExchangeRatePrevote_submit_block, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AggregateExchangeRatePrevote) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nibiru.oracle.v1.AggregateExchangeRatePrevote.hash":
		return x.Hash != ""
	case "nibiru.oracle.v1.AggregateExchangeRatePrevote.voter":
		return x.Voter != ""
	case "nibiru.oracle.v1.AggregateExchangeRatePrevote.submit_block":
		return x.SubmitBlock != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.AggregateExchangeRatePrevote"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.AggregateExchangeRatePrevote does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateExchangeRatePrevote) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nibiru.oracle.v1.AggregateExchangeRatePrevote.hash":
		x.Hash = ""
	case "nibiru.oracle.v1.AggregateExchangeRatePrevote.voter":
		x.Voter = ""
	case "nibiru.oracle.v1.AggregateExchangeRatePrevote.submit_block":
		x.SubmitBlock = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.AggregateExchangeRatePrevote"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.AggregateExchangeRatePrevote does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AggregateExchangeRatePrevote) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nibiru.oracle.v1.AggregateExchangeRatePrevote.hash":
		value := x.Hash
		return protoreflect.ValueOfString(value)
	case "nibiru.oracle.v1.AggregateExchangeRatePrevote.voter":
		value := x.Voter
		return protoreflect.ValueOfString(value)
	case "nibiru.oracle.v1.AggregateExchangeRatePrevote.submit_block":
		value := x.SubmitBlock
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.AggregateExchangeRatePrevote"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.AggregateExchangeRatePrevote does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateExchangeRatePrevote) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nibiru.oracle.v1.AggregateExchangeRatePrevote.hash":
		x.Hash = value.Interface().(string)
	case "nibiru.oracle.v1.AggregateExchangeRatePrevote.voter":
		x.Voter = value.Interface().(string)
	case "nibiru.oracle.v1.AggregateExchangeRatePrevote.submit_block":
		x.SubmitBlock = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.AggregateExchangeRatePrevote"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.AggregateExchangeRatePrevote does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateExchangeRatePrevote) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nibiru.oracle.v1.AggregateExchangeRatePrevote.hash":
		panic(fmt.Errorf("field hash of message nibiru.oracle.v1.AggregateExchangeRatePrevote is not mutable"))
	case "nibiru.oracle.v1.AggregateExchangeRatePrevote.voter":
		panic(fmt.Errorf("field voter of message nibiru.oracle.v1.AggregateExchangeRatePrevote is not mutable"))
	case "nibiru.oracle.v1.AggregateExchangeRatePrevote.submit_block":
		panic(fmt.Errorf("field submit_block of message nibiru.oracle.v1.AggregateExchangeRatePrevote is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.AggregateExchangeRatePrevote"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.AggregateExchangeRatePrevote does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AggregateExchangeRatePrevote) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nibiru.oracle.v1.AggregateExchangeRatePrevote.hash":
		return protoreflect.ValueOfString("")
	case "nibiru.oracle.v1.AggregateExchangeRatePrevote.voter":
		return protoreflect.ValueOfString("")
	case "nibiru.oracle.v1.AggregateExchangeRatePrevote.submit_block":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.AggregateExchangeRatePrevote"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.AggregateExchangeRatePrevote does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AggregateExchangeRatePrevote) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nibiru.oracle.v1.AggregateExchangeRatePrevote", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AggregateExchangeRatePrevote) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateExchangeRatePrevote) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AggregateExchangeRatePrevote) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AggregateExchangeRatePrevote) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AggregateExchangeRatePrevote)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Hash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Voter)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SubmitBlock != 0 {
			n += 1 + runtime.Sov(uint64(x.SubmitBlock))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AggregateExchangeRatePrevote)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.SubmitBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SubmitBlock))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Voter) > 0 {
			i -= len(x.Voter)
			copy(dAtA[i:], x.Voter)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Voter)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Hash) > 0 {
			i -= len(x.Hash)
			copy(dAtA[i:], x.Hash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Hash)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AggregateExchangeRatePrevote)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AggregateExchangeRatePrevote: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AggregateExchangeRatePrevote: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Hash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Voter = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubmitBlock", wireType)
				}
				x.SubmitBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SubmitBlock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_AggregateExchangeRateVote_1_list)(nil)

type _AggregateExchangeRateVote_1_list struct {
	list *[]*ExchangeRateTuple
}

func (x *_AggregateExchangeRateVote_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AggregateExchangeRateVote_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AggregateExchangeRateVote_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ExchangeRateTuple)
	(*x.list)[i] = concreteValue
}

func (x *_AggregateExchangeRateVote_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ExchangeRateTuple)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AggregateExchangeRateVote_1_list) AppendMutable() protoreflect.Value {
	v := new(ExchangeRateTuple)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AggregateExchangeRateVote_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AggregateExchangeRateVote_1_list) NewElement() protoreflect.Value {
	v := new(ExchangeRateTuple)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AggregateExchangeRateVote_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_AggregateExchangeRateVote                      protoreflect.MessageDescriptor
	fd_AggregateExchangeRateVote_exchange_rate_tuples protoreflect.FieldDescriptor
	fd_AggregateExchangeRateVote_voter                protoreflect.FieldDescriptor
)

func init() {
	file_nibiru_oracle_v1_oracle_proto_init()
	md_AggregateExchangeRateVote = File_nibiru_oracle_v1_oracle_proto.Messages().ByName("AggregateExchangeRateVote")
	fd_AggregateExchangeRateVote_exchange_rate_tuples = md_AggregateExchangeRateVote.Fields().ByName("exchange_rate_tuples")
	fd_AggregateExchangeRateVote_voter = md_AggregateExchangeRateVote.Fields().ByName("voter")
}

var _ protoreflect.Message = (*fastReflection_AggregateExchangeRateVote)(nil)

type fastReflection_AggregateExchangeRateVote AggregateExchangeRateVote

func (x *AggregateExchangeRateVote) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AggregateExchangeRateVote)(x)
}

func (x *AggregateExchangeRateVote) slowProtoReflect() protoreflect.Message {
	mi := &file_nibiru_oracle_v1_oracle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AggregateExchangeRateVote_messageType fastReflection_AggregateExchangeRateVote_messageType
var _ protoreflect.MessageType = fastReflection_AggregateExchangeRateVote_messageType{}

type fastReflection_AggregateExchangeRateVote_messageType struct{}

func (x fastReflection_AggregateExchangeRateVote_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AggregateExchangeRateVote)(nil)
}
func (x fastReflection_AggregateExchangeRateVote_messageType) New() protoreflect.Message {
	return new(fastReflection_AggregateExchangeRateVote)
}
func (x fastReflection_AggregateExchangeRateVote_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AggregateExchangeRateVote
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AggregateExchangeRateVote) Descriptor() protoreflect.MessageDescriptor {
	return md_AggregateExchangeRateVote
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AggregateExchangeRateVote) Type() protoreflect.MessageType {
	return _fastReflection_AggregateExchangeRateVote_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AggregateExchangeRateVote) New() protoreflect.Message {
	return new(fastReflection_AggregateExchangeRateVote)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AggregateExchangeRateVote) Interface() protoreflect.ProtoMessage {
	return (*AggregateExchangeRateVote)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AggregateExchangeRateVote) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.ExchangeRateTuples) != 0 {
		value := protoreflect.ValueOfList(&_AggregateExchangeRateVote_1_list{list: &x.ExchangeRateTuples})
		if !f(fd_AggregateExchangeRateVote_exchange_rate_tuples, value) {
			return
		}
	}
	if x.Voter != "" {
		value := protoreflect.ValueOfString(x.Voter)
		if !f(fd_AggregateExchangeRateVote_voter, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AggregateExchangeRateVote) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nibiru.oracle.v1.AggregateExchangeRateVote.exchange_rate_tuples":
		return len(x.ExchangeRateTuples) != 0
	case "nibiru.oracle.v1.AggregateExchangeRateVote.voter":
		return x.Voter != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.AggregateExchangeRateVote"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.AggregateExchangeRateVote does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateExchangeRateVote) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nibiru.oracle.v1.AggregateExchangeRateVote.exchange_rate_tuples":
		x.ExchangeRateTuples = nil
	case "nibiru.oracle.v1.AggregateExchangeRateVote.voter":
		x.Voter = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.AggregateExchangeRateVote"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.AggregateExchangeRateVote does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AggregateExchangeRateVote) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nibiru.oracle.v1.AggregateExchangeRateVote.exchange_rate_tuples":
		if len(x.ExchangeRateTuples) == 0 {
			return protoreflect.ValueOfList(&_AggregateExchangeRateVote_1_list{})
		}
		listValue := &_AggregateExchangeRateVote_1_list{list: &x.ExchangeRateTuples}
		return protoreflect.ValueOfList(listValue)
	case "nibiru.oracle.v1.AggregateExchangeRateVote.voter":
		value := x.Voter
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.AggregateExchangeRateVote"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.AggregateExchangeRateVote does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateExchangeRateVote) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nibiru.oracle.v1.AggregateExchangeRateVote.exchange_rate_tuples":
		lv := value.List()
		clv := lv.(*_AggregateExchangeRateVote_1_list)
		x.ExchangeRateTuples = *clv.list
	case "nibiru.oracle.v1.AggregateExchangeRateVote.voter":
		x.Voter = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.AggregateExchangeRateVote"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.AggregateExchangeRateVote does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateExchangeRateVote) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nibiru.oracle.v1.AggregateExchangeRateVote.exchange_rate_tuples":
		if x.ExchangeRateTuples == nil {
			x.ExchangeRateTuples = []*ExchangeRateTuple{}
		}
		value := &_AggregateExchangeRateVote_1_list{list: &x.ExchangeRateTuples}
		return protoreflect.ValueOfList(value)
	case "nibiru.oracle.v1.AggregateExchangeRateVote.voter":
		panic(fmt.Errorf("field voter of message nibiru.oracle.v1.AggregateExchangeRateVote is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.AggregateExchangeRateVote"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.AggregateExchangeRateVote does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AggregateExchangeRateVote) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nibiru.oracle.v1.AggregateExchangeRateVote.exchange_rate_tuples":
		list := []*ExchangeRateTuple{}
		return protoreflect.ValueOfList(&_AggregateExchangeRateVote_1_list{list: &list})
	case "nibiru.oracle.v1.AggregateExchangeRateVote.voter":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.AggregateExchangeRateVote"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.AggregateExchangeRateVote does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AggregateExchangeRateVote) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nibiru.oracle.v1.AggregateExchangeRateVote", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AggregateExchangeRateVote) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateExchangeRateVote) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AggregateExchangeRateVote) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AggregateExchangeRateVote) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AggregateExchangeRateVote)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.ExchangeRateTuples) > 0 {
			for _, e := range x.ExchangeRateTuples {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.Voter)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AggregateExchangeRateVote)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Voter) > 0 {
			i -= len(x.Voter)
			copy(dAtA[i:], x.Voter)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Voter)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ExchangeRateTuples) > 0 {
			for iNdEx := len(x.ExchangeRateTuples) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ExchangeRateTuples[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AggregateExchangeRateVote)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AggregateExchangeRateVote: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AggregateExchangeRateVote: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExchangeRateTuples", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExchangeRateTuples = append(x.ExchangeRateTuples, &ExchangeRateTuple{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ExchangeRateTuples[len(x.ExchangeRateTuples)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Voter = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ExchangeRateTuple               protoreflect.MessageDescriptor
	fd_ExchangeRateTuple_pair          protoreflect.FieldDescriptor
	fd_ExchangeRateTuple_exchange_rate protoreflect.FieldDescriptor
)

func init() {
	file_nibiru_oracle_v1_oracle_proto_init()
	md_ExchangeRateTuple = File_nibiru_oracle_v1_oracle_proto.Messages().ByName("ExchangeRateTuple")
	fd_ExchangeRateTuple_pair = md_ExchangeRateTuple.Fields().ByName("pair")
	fd_ExchangeRateTuple_exchange_rate = md_ExchangeRateTuple.Fields().ByName("exchange_rate")
}

var _ protoreflect.Message = (*fastReflection_ExchangeRateTuple)(nil)

type fastReflection_ExchangeRateTuple ExchangeRateTuple

func (x *ExchangeRateTuple) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ExchangeRateTuple)(x)
}

func (x *ExchangeRateTuple) slowProtoReflect() protoreflect.Message {
	mi := &file_nibiru_oracle_v1_oracle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ExchangeRateTuple_messageType fastReflection_ExchangeRateTuple_messageType
var _ protoreflect.MessageType = fastReflection_ExchangeRateTuple_messageType{}

type fastReflection_ExchangeRateTuple_messageType struct{}

func (x fastReflection_ExchangeRateTuple_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ExchangeRateTuple)(nil)
}
func (x fastReflection_ExchangeRateTuple_messageType) New() protoreflect.Message {
	return new(fastReflection_ExchangeRateTuple)
}
func (x fastReflection_ExchangeRateTuple_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ExchangeRateTuple
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ExchangeRateTuple) Descriptor() protoreflect.MessageDescriptor {
	return md_ExchangeRateTuple
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ExchangeRateTuple) Type() protoreflect.MessageType {
	return _fastReflection_ExchangeRateTuple_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ExchangeRateTuple) New() protoreflect.Message {
	return new(fastReflection_ExchangeRateTuple)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ExchangeRateTuple) Interface() protoreflect.ProtoMessage {
	return (*ExchangeRateTuple)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ExchangeRateTuple) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Pair != "" {
		value := protoreflect.ValueOfString(x.Pair)
		if !f(fd_ExchangeRateTuple_pair, value) {
			return
		}
	}
	if x.ExchangeRate != "" {
		value := protoreflect.ValueOfString(x.ExchangeRate)
		if !f(fd_ExchangeRateTuple_exchange_rate, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ExchangeRateTuple) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nibiru.oracle.v1.ExchangeRateTuple.pair":
		return x.Pair != ""
	case "nibiru.oracle.v1.ExchangeRateTuple.exchange_rate":
		return x.ExchangeRate != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.ExchangeRateTuple"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.ExchangeRateTuple does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExchangeRateTuple) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nibiru.oracle.v1.ExchangeRateTuple.pair":
		x.Pair = ""
	case "nibiru.oracle.v1.ExchangeRateTuple.exchange_rate":
		x.ExchangeRate = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.ExchangeRateTuple"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.ExchangeRateTuple does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ExchangeRateTuple) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nibiru.oracle.v1.ExchangeRateTuple.pair":
		value := x.Pair
		return protoreflect.ValueOfString(value)
	case "nibiru.oracle.v1.ExchangeRateTuple.exchange_rate":
		value := x.ExchangeRate
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.ExchangeRateTuple"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.ExchangeRateTuple does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExchangeRateTuple) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nibiru.oracle.v1.ExchangeRateTuple.pair":
		x.Pair = value.Interface().(string)
	case "nibiru.oracle.v1.ExchangeRateTuple.exchange_rate":
		x.ExchangeRate = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.ExchangeRateTuple"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.ExchangeRateTuple does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExchangeRateTuple) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nibiru.oracle.v1.ExchangeRateTuple.pair":
		panic(fmt.Errorf("field pair of message nibiru.oracle.v1.ExchangeRateTuple is not mutable"))
	case "nibiru.oracle.v1.ExchangeRateTuple.exchange_rate":
		panic(fmt.Errorf("field exchange_rate of message nibiru.oracle.v1.ExchangeRateTuple is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.ExchangeRateTuple"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.ExchangeRateTuple does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ExchangeRateTuple) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nibiru.oracle.v1.ExchangeRateTuple.pair":
		return protoreflect.ValueOfString("")
	case "nibiru.oracle.v1.ExchangeRateTuple.exchange_rate":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.ExchangeRateTuple"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.ExchangeRateTuple does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ExchangeRateTuple) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nibiru.oracle.v1.ExchangeRateTuple", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ExchangeRateTuple) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExchangeRateTuple) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ExchangeRateTuple) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ExchangeRateTuple) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ExchangeRateTuple)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Pair)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ExchangeRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ExchangeRateTuple)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ExchangeRate) > 0 {
			i -= len(x.ExchangeRate)
			copy(dAtA[i:], x.ExchangeRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExchangeRate)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Pair) > 0 {
			i -= len(x.Pair)
			copy(dAtA[i:], x.Pair)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Pair)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ExchangeRateTuple)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ExchangeRateTuple: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ExchangeRateTuple: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pair = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExchangeRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ExchangeRateAtBlock                    protoreflect.MessageDescriptor
	fd_ExchangeRateAtBlock_exchange_rate      protoreflect.FieldDescriptor
	fd_ExchangeRateAtBlock_created_block      protoreflect.FieldDescriptor
	fd_ExchangeRateAtBlock_block_timestamp_ms protoreflect.FieldDescriptor
)

func init() {
	file_nibiru_oracle_v1_oracle_proto_init()
	md_ExchangeRateAtBlock = File_nibiru_oracle_v1_oracle_proto.Messages().ByName("ExchangeRateAtBlock")
	fd_ExchangeRateAtBlock_exchange_rate = md_ExchangeRateAtBlock.Fields().ByName("exchange_rate")
	fd_ExchangeRateAtBlock_created_block = md_ExchangeRateAtBlock.Fields().ByName("created_block")
	fd_ExchangeRateAtBlock_block_timestamp_ms = md_ExchangeRateAtBlock.Fields().ByName("block_timestamp_ms")
}

var _ protoreflect.Message = (*fastReflection_ExchangeRateAtBlock)(nil)

type fastReflection_ExchangeRateAtBlock ExchangeRateAtBlock

func (x *ExchangeRateAtBlock) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ExchangeRateAtBlock)(x)
}

func (x *ExchangeRateAtBlock) slowProtoReflect() protoreflect.Message {
	mi := &file_nibiru_oracle_v1_oracle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ExchangeRateAtBlock_messageType fastReflection_ExchangeRateAtBlock_messageType
var _ protoreflect.MessageType = fastReflection_ExchangeRateAtBlock_messageType{}

type fastReflection_ExchangeRateAtBlock_messageType struct{}

func (x fastReflection_ExchangeRateAtBlock_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ExchangeRateAtBlock)(nil)
}
func (x fastReflection_ExchangeRateAtBlock_messageType) New() protoreflect.Message {
	return new(fastReflection_ExchangeRateAtBlock)
}
func (x fastReflection_ExchangeRateAtBlock_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ExchangeRateAtBlock
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ExchangeRateAtBlock) Descriptor() protoreflect.MessageDescriptor {
	return md_ExchangeRateAtBlock
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ExchangeRateAtBlock) Type() protoreflect.MessageType {
	return _fastReflection_ExchangeRateAtBlock_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ExchangeRateAtBlock) New() protoreflect.Message {
	return new(fastReflection_ExchangeRateAtBlock)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ExchangeRateAtBlock) Interface() protoreflect.ProtoMessage {
	return (*ExchangeRateAtBlock)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ExchangeRateAtBlock) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ExchangeRate != "" {
		value := protoreflect.ValueOfString(x.ExchangeRate)
		if !f(fd_ExchangeRateAtBlock_exchange_rate, value) {
			return
		}
	}
	if x.CreatedBlock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CreatedBlock)
		if !f(fd_ExchangeRateAtBlock_created_block, value) {
			return
		}
	}
	if x.BlockTimestampMs != int64(0) {
		value := protoreflect.ValueOfInt64(x.BlockTimestampMs)
		if !f(fd_ExchangeRateAtBlock_block_timestamp_ms, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ExchangeRateAtBlock) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nibiru.oracle.v1.ExchangeRateAtBlock.exchange_rate":
		return x.ExchangeRate != ""
	case "nibiru.oracle.v1.ExchangeRateAtBlock.created_block":
		return x.CreatedBlock != uint64(0)
	case "nibiru.oracle.v1.ExchangeRateAtBlock.block_timestamp_ms":
		return x.BlockTimestampMs != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.ExchangeRateAtBlock"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.ExchangeRateAtBlock does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExchangeRateAtBlock) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nibiru.oracle.v1.ExchangeRateAtBlock.exchange_rate":
		x.ExchangeRate = ""
	case "nibiru.oracle.v1.ExchangeRateAtBlock.created_block":
		x.CreatedBlock = uint64(0)
	case "nibiru.oracle.v1.ExchangeRateAtBlock.block_timestamp_ms":
		x.BlockTimestampMs = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.ExchangeRateAtBlock"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.ExchangeRateAtBlock does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ExchangeRateAtBlock) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nibiru.oracle.v1.ExchangeRateAtBlock.exchange_rate":
		value := x.ExchangeRate
		return protoreflect.ValueOfString(value)
	case "nibiru.oracle.v1.ExchangeRateAtBlock.created_block":
		value := x.CreatedBlock
		return protoreflect.ValueOfUint64(value)
	case "nibiru.oracle.v1.ExchangeRateAtBlock.block_timestamp_ms":
		value := x.BlockTimestampMs
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.ExchangeRateAtBlock"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.ExchangeRateAtBlock does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExchangeRateAtBlock) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nibiru.oracle.v1.ExchangeRateAtBlock.exchange_rate":
		x.ExchangeRate = value.Interface().(string)
	case "nibiru.oracle.v1.ExchangeRateAtBlock.created_block":
		x.CreatedBlock = value.Uint()
	case "nibiru.oracle.v1.ExchangeRateAtBlock.block_timestamp_ms":
		x.BlockTimestampMs = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.ExchangeRateAtBlock"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.ExchangeRateAtBlock does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExchangeRateAtBlock) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nibiru.oracle.v1.ExchangeRateAtBlock.exchange_rate":
		panic(fmt.Errorf("field exchange_rate of message nibiru.oracle.v1.ExchangeRateAtBlock is not mutable"))
	case "nibiru.oracle.v1.ExchangeRateAtBlock.created_block":
		panic(fmt.Errorf("field created_block of message nibiru.oracle.v1.ExchangeRateAtBlock is not mutable"))
	case "nibiru.oracle.v1.ExchangeRateAtBlock.block_timestamp_ms":
		panic(fmt.Errorf("field block_timestamp_ms of message nibiru.oracle.v1.ExchangeRateAtBlock is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.ExchangeRateAtBlock"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.ExchangeRateAtBlock does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ExchangeRateAtBlock) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nibiru.oracle.v1.ExchangeRateAtBlock.exchange_rate":
		return protoreflect.ValueOfString("")
	case "nibiru.oracle.v1.ExchangeRateAtBlock.created_block":
		return protoreflect.ValueOfUint64(uint64(0))
	case "nibiru.oracle.v1.ExchangeRateAtBlock.block_timestamp_ms":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.ExchangeRateAtBlock"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.ExchangeRateAtBlock does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ExchangeRateAtBlock) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nibiru.oracle.v1.ExchangeRateAtBlock", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ExchangeRateAtBlock) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExchangeRateAtBlock) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ExchangeRateAtBlock) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ExchangeRateAtBlock) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ExchangeRateAtBlock)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ExchangeRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CreatedBlock != 0 {
			n += 1 + runtime.Sov(uint64(x.CreatedBlock))
		}
		if x.BlockTimestampMs != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockTimestampMs))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ExchangeRateAtBlock)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.BlockTimestampMs != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockTimestampMs))
			i--
			dAtA[i] = 0x18
		}
		if x.CreatedBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CreatedBlock))
			i--
			dAtA[i] = 0x10
		}
		if len(x.ExchangeRate) > 0 {
			i -= len(x.ExchangeRate)
			copy(dAtA[i:], x.ExchangeRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExchangeRate)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ExchangeRateAtBlock)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ExchangeRateAtBlock: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ExchangeRateAtBlock: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExchangeRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreatedBlock", wireType)
				}
				x.CreatedBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CreatedBlock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockTimestampMs", wireType)
				}
				x.BlockTimestampMs = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockTimestampMs |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_Rewards_3_list)(nil)

type _Rewards_3_list struct {
	list *[]*v1beta1.Coin
}

func (x *_Rewards_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Rewards_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Rewards_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_Rewards_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Rewards_3_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Rewards_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Rewards_3_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Rewards_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Rewards              protoreflect.MessageDescriptor
	fd_Rewards_id           protoreflect.FieldDescriptor
	fd_Rewards_vote_periods protoreflect.FieldDescriptor
	fd_Rewards_coins        protoreflect.FieldDescriptor
)

func init() {
	file_nibiru_oracle_v1_oracle_proto_init()
	md_Rewards = File_nibiru_oracle_v1_oracle_proto.Messages().ByName("Rewards")
	fd_Rewards_id = md_Rewards.Fields().ByName("id")
	fd_Rewards_vote_periods = md_Rewards.Fields().ByName("vote_periods")
	fd_Rewards_coins = md_Rewards.Fields().ByName("coins")
}

var _ protoreflect.Message = (*fastReflection_Rewards)(nil)

type fastReflection_Rewards Rewards

func (x *Rewards) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Rewards)(x)
}

func (x *Rewards) slowProtoReflect() protoreflect.Message {
	mi := &file_nibiru_oracle_v1_oracle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Rewards_messageType fastReflection_Rewards_messageType
var _ protoreflect.MessageType = fastReflection_Rewards_messageType{}

type fastReflection_Rewards_messageType struct{}

func (x fastReflection_Rewards_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Rewards)(nil)
}
func (x fastReflection_Rewards_messageType) New() protoreflect.Message {
	return new(fastReflection_Rewards)
}
func (x fastReflection_Rewards_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Rewards
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Rewards) Descriptor() protoreflect.MessageDescriptor {
	return md_Rewards
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Rewards) Type() protoreflect.MessageType {
	return _fastReflection_Rewards_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Rewards) New() protoreflect.Message {
	return new(fastReflection_Rewards)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Rewards) Interface() protoreflect.ProtoMessage {
	return (*Rewards)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Rewards) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Rewards_id, value) {
			return
		}
	}
	if x.VotePeriods != uint64(0) {
		value := protoreflect.ValueOfUint64(x.VotePeriods)
		if !f(fd_Rewards_vote_periods, value) {
			return
		}
	}
	if len(x.Coins) != 0 {
		value := protoreflect.ValueOfList(&_Rewards_3_list{list: &x.Coins})
		if !f(fd_Rewards_coins, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Rewards) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nibiru.oracle.v1.Rewards.id":
		return x.Id != uint64(0)
	case "nibiru.oracle.v1.Rewards.vote_periods":
		return x.VotePeriods != uint64(0)
	case "nibiru.oracle.v1.Rewards.coins":
		return len(x.Coins) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.Rewards"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.Rewards does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Rewards) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nibiru.oracle.v1.Rewards.id":
		x.Id = uint64(0)
	case "nibiru.oracle.v1.Rewards.vote_periods":
		x.VotePeriods = uint64(0)
	case "nibiru.oracle.v1.Rewards.coins":
		x.Coins = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.Rewards"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.Rewards does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Rewards) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nibiru.oracle.v1.Rewards.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "nibiru.oracle.v1.Rewards.vote_periods":
		value := x.VotePeriods
		return protoreflect.ValueOfUint64(value)
	case "nibiru.oracle.v1.Rewards.coins":
		if len(x.Coins) == 0 {
			return protoreflect.ValueOfList(&_Rewards_3_list{})
		}
		listValue := &_Rewards_3_list{list: &x.Coins}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.Rewards"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.Rewards does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Rewards) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nibiru.oracle.v1.Rewards.id":
		x.Id = value.Uint()
	case "nibiru.oracle.v1.Rewards.vote_periods":
		x.VotePeriods = value.Uint()
	case "nibiru.oracle.v1.Rewards.coins":
		lv := value.List()
		clv := lv.(*_Rewards_3_list)
		x.Coins = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.Rewards"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.Rewards does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Rewards) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nibiru.oracle.v1.Rewards.coins":
		if x.Coins == nil {
			x.Coins = []*v1beta1.Coin{}
		}
		value := &_Rewards_3_list{list: &x.Coins}
		return protoreflect.ValueOfList(value)
	case "nibiru.oracle.v1.Rewards.id":
		panic(fmt.Errorf("field id of message nibiru.oracle.v1.Rewards is not mutable"))
	case "nibiru.oracle.v1.Rewards.vote_periods":
		panic(fmt.Errorf("field vote_periods of message nibiru.oracle.v1.Rewards is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.Rewards"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.Rewards does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Rewards) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nibiru.oracle.v1.Rewards.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "nibiru.oracle.v1.Rewards.vote_periods":
		return protoreflect.ValueOfUint64(uint64(0))
	case "nibiru.oracle.v1.Rewards.coins":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_Rewards_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nibiru.oracle.v1.Rewards"))
		}
		panic(fmt.Errorf("message nibiru.oracle.v1.Rewards does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Rewards) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nibiru.oracle.v1.Rewards", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Rewards) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Rewards) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Rewards) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Rewards) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Rewards)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.VotePeriods != 0 {
			n += 1 + runtime.Sov(uint64(x.VotePeriods))
		}
		if len(x.Coins) > 0 {
			for _, e := range x.Coins {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Rewards)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Coins) > 0 {
			for iNdEx := len(x.Coins) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Coins[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if x.VotePeriods != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.VotePeriods))
			i--
			dAtA[i] = 0x10
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Rewards)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Rewards: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Rewards: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VotePeriods", wireType)
				}
				x.VotePeriods = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.VotePeriods |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Coins = append(x.Coins, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Coins[len(x.Coins)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: nibiru/oracle/v1/oracle.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Params defines the module parameters for the x/oracle module.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VotePeriod defines the number of blocks during which voting takes place.
	VotePeriod uint64 `protobuf:"varint,1,opt,name=vote_period,json=votePeriod,proto3" json:"vote_period,omitempty"`
	// VoteThreshold specifies the minimum proportion of votes that must be
	// received for a ballot to pass.
	VoteThreshold string `protobuf:"bytes,2,opt,name=vote_threshold,json=voteThreshold,proto3" json:"vote_threshold,omitempty"`
	// RewardBand defines a maxium divergence that a price vote can have from the
	// weighted median in the ballot. If a vote lies within the valid range
	// defined by:
	//
	//	μ := weightedMedian,
	//	validRange := μ ± (μ * rewardBand / 2),
	//
	// then rewards are added to the validator performance.
	// Note that if the reward band is smaller than 1 standard
	// deviation, the band is taken to be 1 standard deviation.a price
	RewardBand string `protobuf:"bytes,3,opt,name=reward_band,json=rewardBand,proto3" json:"reward_band,omitempty"`
	// The set of whitelisted markets, or asset pairs, for the module.
	// Ex. '["unibi:uusd","ubtc:uusd"]'
	Whitelist []string `protobuf:"bytes,4,rep,name=whitelist,proto3" json:"whitelist,omitempty"`
	// SlashFraction returns the proportion of an oracle's stake that gets
	// slashed in the event of slashing. `SlashFraction` specifies the exact
	// penalty for failing a voting period.
	SlashFraction string `protobuf:"bytes,5,opt,name=slash_fraction,json=slashFraction,proto3" json:"slash_fraction,omitempty"`
	// SlashWindow returns the number of voting periods that specify a
	// "slash window". After each slash window, all oracles that have missed more
	// than the penalty threshold are slashed. Missing the penalty threshold is
	// synonymous with submitting fewer valid votes than `MinValidPerWindow`.
	SlashWindow       uint64 `protobuf:"varint,6,opt,name=slash_window,json=slashWindow,proto3" json:"slash_window,omitempty"`
	MinValidPerWindow string `protobuf:"bytes,7,opt,name=min_valid_per_window,json=minValidPerWindow,proto3" json:"min_valid_per_window,omitempty"`
	// Amount of time to look back for TWAP calculations.
	// Ex: "900.000000069s" corresponds to 900 seconds and 69 nanoseconds in JSON.
	TwapLookbackWindow *durationpb.Duration `protobuf:"bytes,8,opt,name=twap_lookback_window,json=twapLookbackWindow,proto3" json:"twap_lookback_window,omitempty"`
	// The minimum number of voters (i.e. oracle validators) per pair for it to be
	// considered a passing ballot. Recommended at least 4.
	MinVoters uint64 `protobuf:"varint,9,opt,name=min_voters,json=minVoters,proto3" json:"min_voters,omitempty"`
	// The validator fee ratio that is given to validators every epoch.
	ValidatorFeeRatio string `protobuf:"bytes,10,opt,name=validator_fee_ratio,json=validatorFeeRatio,proto3" json:"validator_fee_ratio,omitempty"`
	ExpirationBlocks  uint64 `protobuf:"varint,11,opt,name=expiration_blocks,json=expirationBlocks,proto3" json:"expiration_blocks,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nibiru_oracle_v1_oracle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_nibiru_oracle_v1_oracle_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetVotePeriod() uint64 {
	if x != nil {
		return x.VotePeriod
	}
	return 0
}

func (x *Params) GetVoteThreshold() string {
	if x != nil {
		return x.VoteThreshold
	}
	return ""
}

func (x *Params) GetRewardBand() string {
	if x != nil {
		return x.RewardBand
	}
	return ""
}

func (x *Params) GetWhitelist() []string {
	if x != nil {
		return x.Whitelist
	}
	return nil
}

func (x *Params) GetSlashFraction() string {
	if x != nil {
		return x.SlashFraction
	}
	return ""
}

func (x *Params) GetSlashWindow() uint64 {
	if x != nil {
		return x.SlashWindow
	}
	return 0
}

func (x *Params) GetMinValidPerWindow() string {
	if x != nil {
		return x.MinValidPerWindow
	}
	return ""
}

func (x *Params) GetTwapLookbackWindow() *durationpb.Duration {
	if x != nil {
		return x.TwapLookbackWindow
	}
	return nil
}

func (x *Params) GetMinVoters() uint64 {
	if x != nil {
		return x.MinVoters
	}
	return 0
}

func (x *Params) GetValidatorFeeRatio() string {
	if x != nil {
		return x.ValidatorFeeRatio
	}
	return ""
}

func (x *Params) GetExpirationBlocks() uint64 {
	if x != nil {
		return x.ExpirationBlocks
	}
	return 0
}

// Struct for aggregate prevoting on the ExchangeRateVote.
// The purpose of aggregate prevote is to hide vote exchange rates with hash
// which is formatted as hex string in
// SHA256("{salt}:({pair},{exchange_rate})|...|({pair},{exchange_rate}):{voter}")
type AggregateExchangeRatePrevote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash        string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Voter       string `protobuf:"bytes,2,opt,name=voter,proto3" json:"voter,omitempty"`
	SubmitBlock uint64 `protobuf:"varint,3,opt,name=submit_block,json=submitBlock,proto3" json:"submit_block,omitempty"`
}

func (x *AggregateExchangeRatePrevote) Reset() {
	*x = AggregateExchangeRatePrevote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nibiru_oracle_v1_oracle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateExchangeRatePrevote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateExchangeRatePrevote) ProtoMessage() {}

// Deprecated: Use AggregateExchangeRatePrevote.ProtoReflect.Descriptor instead.
func (*AggregateExchangeRatePrevote) Descriptor() ([]byte, []int) {
	return file_nibiru_oracle_v1_oracle_proto_rawDescGZIP(), []int{1}
}

func (x *AggregateExchangeRatePrevote) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *AggregateExchangeRatePrevote) GetVoter() string {
	if x != nil {
		return x.Voter
	}
	return ""
}

func (x *AggregateExchangeRatePrevote) GetSubmitBlock() uint64 {
	if x != nil {
		return x.SubmitBlock
	}
	return 0
}

// MsgAggregateExchangeRateVote - struct for voting on
// the exchange rates different assets.
type AggregateExchangeRateVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeRateTuples []*ExchangeRateTuple `protobuf:"bytes,1,rep,name=exchange_rate_tuples,json=exchangeRateTuples,proto3" json:"exchange_rate_tuples,omitempty"`
	Voter              string               `protobuf:"bytes,2,opt,name=voter,proto3" json:"voter,omitempty"`
}

func (x *AggregateExchangeRateVote) Reset() {
	*x = AggregateExchangeRateVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nibiru_oracle_v1_oracle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateExchangeRateVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateExchangeRateVote) ProtoMessage() {}

// Deprecated: Use AggregateExchangeRateVote.ProtoReflect.Descriptor instead.
func (*AggregateExchangeRateVote) Descriptor() ([]byte, []int) {
	return file_nibiru_oracle_v1_oracle_proto_rawDescGZIP(), []int{2}
}

func (x *AggregateExchangeRateVote) GetExchangeRateTuples() []*ExchangeRateTuple {
	if x != nil {
		return x.ExchangeRateTuples
	}
	return nil
}

func (x *AggregateExchangeRateVote) GetVoter() string {
	if x != nil {
		return x.Voter
	}
	return ""
}

// ExchangeRateTuple - struct to store interpreted exchange rates data to store
type ExchangeRateTuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair         string `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	ExchangeRate string `protobuf:"bytes,2,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
}

func (x *ExchangeRateTuple) Reset() {
	*x = ExchangeRateTuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nibiru_oracle_v1_oracle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRateTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRateTuple) ProtoMessage() {}

// Deprecated: Use ExchangeRateTuple.ProtoReflect.Descriptor instead.
func (*ExchangeRateTuple) Descriptor() ([]byte, []int) {
	return file_nibiru_oracle_v1_oracle_proto_rawDescGZIP(), []int{3}
}

func (x *ExchangeRateTuple) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *ExchangeRateTuple) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

type ExchangeRateAtBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeRate string `protobuf:"bytes,1,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	CreatedBlock uint64 `protobuf:"varint,2,opt,name=created_block,json=createdBlock,proto3" json:"created_block,omitempty"`
	// Block timestamp for the block where the oracle came to consensus for this
	// price. This timestamp is a conventional Unix millisecond time, i.e. the
	// number of milliseconds elapsed since January 1, 1970 UTC.
	BlockTimestampMs int64 `protobuf:"varint,3,opt,name=block_timestamp_ms,json=blockTimestampMs,proto3" json:"block_timestamp_ms,omitempty"`
}

func (x *ExchangeRateAtBlock) Reset() {
	*x = ExchangeRateAtBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nibiru_oracle_v1_oracle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRateAtBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRateAtBlock) ProtoMessage() {}

// Deprecated: Use ExchangeRateAtBlock.ProtoReflect.Descriptor instead.
func (*ExchangeRateAtBlock) Descriptor() ([]byte, []int) {
	return file_nibiru_oracle_v1_oracle_proto_rawDescGZIP(), []int{4}
}

func (x *ExchangeRateAtBlock) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *ExchangeRateAtBlock) GetCreatedBlock() uint64 {
	if x != nil {
		return x.CreatedBlock
	}
	return 0
}

func (x *ExchangeRateAtBlock) GetBlockTimestampMs() int64 {
	if x != nil {
		return x.BlockTimestampMs
	}
	return 0
}

// Rewards defines a credit object towards validators
// which provide prices faithfully for different pairs.
type Rewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id uniquely identifies the rewards instance of the pair
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// vote_periods defines the vote periods left in which rewards will be
	// distributed.
	VotePeriods uint64 `protobuf:"varint,2,opt,name=vote_periods,json=votePeriods,proto3" json:"vote_periods,omitempty"`
	// Coins defines the amount of coins to distribute in a single vote period.
	Coins []*v1beta1.Coin `protobuf:"bytes,3,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *Rewards) Reset() {
	*x = Rewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nibiru_oracle_v1_oracle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rewards) ProtoMessage() {}

// Deprecated: Use Rewards.ProtoReflect.Descriptor instead.
func (*Rewards) Descriptor() ([]byte, []int) {
	return file_nibiru_oracle_v1_oracle_proto_rawDescGZIP(), []int{5}
}

func (x *Rewards) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Rewards) GetVotePeriods() uint64 {
	if x != nil {
		return x.VotePeriods
	}
	return 0
}

func (x *Rewards) GetCoins() []*v1beta1.Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

var File_nibiru_oracle_v1_oracle_proto protoreflect.FileDescriptor

var file_nibiru_oracle_v1_oracle_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6e, 0x69, 0x62, 0x69, 0x72, 0x75, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x6e, 0x69, 0x62, 0x69, 0x72, 0x75, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x08, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x16, 0xf2, 0xde, 0x1f, 0x12, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x52,
	0x0a, 0x76, 0x6f, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x6e, 0x0a, 0x0e, 0x76,
	0x6f, 0x74, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x47, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x63, 0xf2, 0xde, 0x1f, 0x15, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x76, 0x6f, 0x74,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x52, 0x0d, 0x76, 0x6f,
	0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x65, 0x0a, 0x0b, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x44, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63,
	0xf2, 0xde, 0x1f, 0x12, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x22, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61,
	0x6e, 0x64, 0x12, 0x6a, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x4c, 0xda, 0xde, 0x1f, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x69, 0x62, 0x69, 0x72, 0x75, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x2f, 0x6e, 0x69, 0x62, 0x69, 0x72, 0x75, 0x2f, 0x76, 0x32, 0x2f, 0x78, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x50, 0x61, 0x69, 0x72, 0xf2,
	0xde, 0x1f, 0x10, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x6e,
	0x0a, 0x0e, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xf2, 0xde, 0x1f, 0x15, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52,
	0x0d, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x0c, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x17, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x52, 0x0b, 0x73,
	0x6c, 0x61, 0x73, 0x68, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x7e, 0x0a, 0x14, 0x6d, 0x69,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xf2, 0xde, 0x1f, 0x1b, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x50, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x96, 0x01, 0x0a, 0x14, 0x74,
	0x77, 0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x49, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x1e, 0x74, 0x77,
	0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x1b,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x74, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x98, 0xdf, 0x1f, 0x01, 0x52,
	0x12, 0x74, 0x77, 0x61, 0x70, 0x4c, 0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x12, 0x34, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x15, 0xf2, 0xde, 0x1f, 0x11, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x22, 0x52, 0x09,
	0x6d, 0x69, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x12, 0x7c, 0x0a, 0x13, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xf2, 0xde, 0x1f, 0x1a, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x22, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x49, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22,
	0x52, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x1c, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xde, 0x1f, 0x0b, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x68, 0x61, 0x73, 0x68, 0x22, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x26,
	0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xf2,
	0xde, 0x1f, 0x0c, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x22, 0x52,
	0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x17, 0xf2, 0xde,
	0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22, 0xe0, 0x01, 0x0a,
	0x19, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x14, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x75, 0x70,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x69, 0x62, 0x69,
	0x72, 0x75, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x42, 0x39,
	0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x1b, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x75, 0x70, 0x6c,
	0x65, 0x73, 0x22, 0xaa, 0xdf, 0x1f, 0x12, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xf2, 0xde,
	0x1f, 0x0c, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x22, 0x52, 0x05,
	0x76, 0x6f, 0x74, 0x65, 0x72, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22,
	0xeb, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x69, 0x62, 0x69, 0x72, 0x75, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x2f, 0x6e, 0x69, 0x62, 0x69, 0x72, 0x75, 0x2f, 0x76, 0x32, 0x2f, 0x78, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x50, 0x61, 0x69,
	0x72, 0xf2, 0xde, 0x1f, 0x0b, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x61, 0x69, 0x72, 0x22,
	0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x6b, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xf2, 0xde, 0x1f,
	0x14, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x22, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22, 0x8e, 0x02,
	0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x6b, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xf2, 0xde, 0x1f, 0x14,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x22, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x18, 0xf2, 0xde, 0x1f, 0x14, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x22, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x4b, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1d, 0xf2,
	0xde, 0x1f, 0x19, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x22, 0x52, 0x10, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x22, 0x73,
	0x0a, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x74,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x76, 0x6f, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x05,
	0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x63, 0x6f,
	0x69, 0x6e, 0x73, 0x42, 0xb1, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x69, 0x62, 0x69,
	0x72, 0x75, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x4f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x69,
	0x62, 0x69, 0x72, 0x75, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4e, 0x4f, 0x58, 0xaa, 0x02, 0x10,
	0x4e, 0x69, 0x62, 0x69, 0x72, 0x75, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x10, 0x4e, 0x69, 0x62, 0x69, 0x72, 0x75, 0x5c, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x4e, 0x69, 0x62, 0x69, 0x72, 0x75, 0x5c, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x12, 0x4e, 0x69, 0x62, 0x69, 0x72, 0x75, 0x3a, 0x3a, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nibiru_oracle_v1_oracle_proto_rawDescOnce sync.Once
	file_nibiru_oracle_v1_oracle_proto_rawDescData = file_nibiru_oracle_v1_oracle_proto_rawDesc
)

func file_nibiru_oracle_v1_oracle_proto_rawDescGZIP() []byte {
	file_nibiru_oracle_v1_oracle_proto_rawDescOnce.Do(func() {
		file_nibiru_oracle_v1_oracle_proto_rawDescData = protoimpl.X.CompressGZIP(file_nibiru_oracle_v1_oracle_proto_rawDescData)
	})
	return file_nibiru_oracle_v1_oracle_proto_rawDescData
}

var file_nibiru_oracle_v1_oracle_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_nibiru_oracle_v1_oracle_proto_goTypes = []interface{}{
	(*Params)(nil),                       // 0: nibiru.oracle.v1.Params
	(*AggregateExchangeRatePrevote)(nil), // 1: nibiru.oracle.v1.AggregateExchangeRatePrevote
	(*AggregateExchangeRateVote)(nil),    // 2: nibiru.oracle.v1.AggregateExchangeRateVote
	(*ExchangeRateTuple)(nil),            // 3: nibiru.oracle.v1.ExchangeRateTuple
	(*ExchangeRateAtBlock)(nil),          // 4: nibiru.oracle.v1.ExchangeRateAtBlock
	(*Rewards)(nil),                      // 5: nibiru.oracle.v1.Rewards
	(*durationpb.Duration)(nil),          // 6: google.protobuf.Duration
	(*v1beta1.Coin)(nil),                 // 7: cosmos.base.v1beta1.Coin
}
var file_nibiru_oracle_v1_oracle_proto_depIdxs = []int32{
	6, // 0: nibiru.oracle.v1.Params.twap_lookback_window:type_name -> google.protobuf.Duration
	3, // 1: nibiru.oracle.v1.AggregateExchangeRateVote.exchange_rate_tuples:type_name -> nibiru.oracle.v1.ExchangeRateTuple
	7, // 2: nibiru.oracle.v1.Rewards.coins:type_name -> cosmos.base.v1beta1.Coin
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_nibiru_oracle_v1_oracle_proto_init() }
func file_nibiru_oracle_v1_oracle_proto_init() {
	if File_nibiru_oracle_v1_oracle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nibiru_oracle_v1_oracle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nibiru_oracle_v1_oracle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateExchangeRatePrevote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nibiru_oracle_v1_oracle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateExchangeRateVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nibiru_oracle_v1_oracle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRateTuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nibiru_oracle_v1_oracle_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRateAtBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nibiru_oracle_v1_oracle_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nibiru_oracle_v1_oracle_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nibiru_oracle_v1_oracle_proto_goTypes,
		DependencyIndexes: file_nibiru_oracle_v1_oracle_proto_depIdxs,
		MessageInfos:      file_nibiru_oracle_v1_oracle_proto_msgTypes,
	}.Build()
	File_nibiru_oracle_v1_oracle_proto = out.File
	file_nibiru_oracle_v1_oracle_proto_rawDesc = nil
	file_nibiru_oracle_v1_oracle_proto_goTypes = nil
	file_nibiru_oracle_v1_oracle_proto_depIdxs = nil
}
