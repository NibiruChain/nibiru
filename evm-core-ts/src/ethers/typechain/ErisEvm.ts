/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  ContractMethod,
  ContractRunner,
  FunctionFragment,
  Interface,
  Listener,
  Result,
} from "ethers"

import type {
  TypedContractEvent,
  TypedContractMethod,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
} from "./common"

export interface ErisEvmInterface extends Interface {
  getFunction(
    nameOrSignature: "liquidStake" | "redeem" | "state" | "unstake",
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: "liquidStake",
    values: [BigNumberish],
  ): string
  encodeFunctionData(functionFragment: "redeem", values?: undefined): string
  encodeFunctionData(functionFragment: "state", values?: undefined): string
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish],
  ): string

  decodeFunctionResult(functionFragment: "liquidStake", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result
}

export interface ErisEvm extends BaseContract {
  connect(runner?: ContractRunner | null): ErisEvm
  waitForDeployment(): Promise<this>

  interface: ErisEvmInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>

  liquidStake: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">

  redeem: TypedContractMethod<[], [void], "nonpayable">

  state: TypedContractMethod<[], [string], "view">

  unstake: TypedContractMethod<[stAmount: BigNumberish], [void], "nonpayable">

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T

  getFunction(
    nameOrSignature: "liquidStake",
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">
  getFunction(
    nameOrSignature: "redeem",
  ): TypedContractMethod<[], [void], "nonpayable">
  getFunction(
    nameOrSignature: "state",
  ): TypedContractMethod<[], [string], "view">
  getFunction(
    nameOrSignature: "unstake",
  ): TypedContractMethod<[stAmount: BigNumberish], [void], "nonpayable">

  filters: {}
}
