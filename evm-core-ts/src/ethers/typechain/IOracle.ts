/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  ContractMethod,
  ContractRunner,
  FunctionFragment,
  Interface,
  Listener,
  Result,
} from "ethers"

import type {
  TypedContractEvent,
  TypedContractMethod,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
} from "./common"

export interface IOracleInterface extends Interface {
  getFunction(
    nameOrSignature: "chainLinkLatestRoundData" | "queryExchangeRate",
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: "chainLinkLatestRoundData",
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: "queryExchangeRate",
    values: [string],
  ): string

  decodeFunctionResult(
    functionFragment: "chainLinkLatestRoundData",
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: "queryExchangeRate",
    data: BytesLike,
  ): Result
}

export interface IOracle extends BaseContract {
  connect(runner?: ContractRunner | null): IOracle
  waitForDeployment(): Promise<this>

  interface: IOracleInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>

  chainLinkLatestRoundData: TypedContractMethod<
    [pair: string],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint
        answer: bigint
        startedAt: bigint
        updatedAt: bigint
        answeredInRound: bigint
      },
    ],
    "view"
  >

  queryExchangeRate: TypedContractMethod<
    [pair: string],
    [
      [bigint, bigint, bigint] & {
        price: bigint
        blockTimeMs: bigint
        blockHeight: bigint
      },
    ],
    "view"
  >

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T

  getFunction(nameOrSignature: "chainLinkLatestRoundData"): TypedContractMethod<
    [pair: string],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint
        answer: bigint
        startedAt: bigint
        updatedAt: bigint
        answeredInRound: bigint
      },
    ],
    "view"
  >
  getFunction(nameOrSignature: "queryExchangeRate"): TypedContractMethod<
    [pair: string],
    [
      [bigint, bigint, bigint] & {
        price: bigint
        blockTimeMs: bigint
        blockHeight: bigint
      },
    ],
    "view"
  >

  filters: {}
}
