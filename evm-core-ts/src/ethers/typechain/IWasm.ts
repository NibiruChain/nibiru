/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers"
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common"

export declare namespace INibiruEvm {
  export type BankCoinStruct = { denom: string; amount: BigNumberish }

  export type BankCoinStructOutput = [denom: string, amount: bigint] & {
    denom: string
    amount: bigint
  }
}

export declare namespace IWasm {
  export type WasmExecuteMsgStruct = {
    contractAddr: string
    msgArgs: BytesLike
    funds: INibiruEvm.BankCoinStruct[]
  }

  export type WasmExecuteMsgStructOutput = [
    contractAddr: string,
    msgArgs: string,
    funds: INibiruEvm.BankCoinStructOutput[],
  ] & {
    contractAddr: string
    msgArgs: string
    funds: INibiruEvm.BankCoinStructOutput[]
  }
}

export interface IWasmInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "execute"
      | "executeMulti"
      | "instantiate"
      | "query"
      | "queryRaw",
  ): FunctionFragment

  getEvent(nameOrSignatureOrTopic: "AbciEvent"): EventFragment

  encodeFunctionData(
    functionFragment: "execute",
    values: [string, BytesLike, INibiruEvm.BankCoinStruct[]],
  ): string
  encodeFunctionData(
    functionFragment: "executeMulti",
    values: [IWasm.WasmExecuteMsgStruct[]],
  ): string
  encodeFunctionData(
    functionFragment: "instantiate",
    values: [
      string,
      BigNumberish,
      BytesLike,
      string,
      INibiruEvm.BankCoinStruct[],
    ],
  ): string
  encodeFunctionData(
    functionFragment: "query",
    values: [string, BytesLike],
  ): string
  encodeFunctionData(
    functionFragment: "queryRaw",
    values: [string, BytesLike],
  ): string

  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "executeMulti",
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: "instantiate", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "query", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "queryRaw", data: BytesLike): Result
}

export namespace AbciEventEvent {
  export type InputTuple = [eventType: string, abciEvent: string]
  export type OutputTuple = [eventType: string, abciEvent: string]
  export interface OutputObject {
    eventType: string
    abciEvent: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface IWasm extends BaseContract {
  connect(runner?: ContractRunner | null): IWasm
  waitForDeployment(): Promise<this>

  interface: IWasmInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>

  execute: TypedContractMethod<
    [
      contractAddr: string,
      msgArgs: BytesLike,
      funds: INibiruEvm.BankCoinStruct[],
    ],
    [string],
    "payable"
  >

  executeMulti: TypedContractMethod<
    [executeMsgs: IWasm.WasmExecuteMsgStruct[]],
    [string[]],
    "payable"
  >

  instantiate: TypedContractMethod<
    [
      admin: string,
      codeID: BigNumberish,
      msgArgs: BytesLike,
      label: string,
      funds: INibiruEvm.BankCoinStruct[],
    ],
    [[string, string] & { contractAddr: string; data: string }],
    "payable"
  >

  query: TypedContractMethod<
    [contractAddr: string, req: BytesLike],
    [string],
    "view"
  >

  queryRaw: TypedContractMethod<
    [contractAddr: string, key: BytesLike],
    [string],
    "view"
  >

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T

  getFunction(
    nameOrSignature: "execute",
  ): TypedContractMethod<
    [
      contractAddr: string,
      msgArgs: BytesLike,
      funds: INibiruEvm.BankCoinStruct[],
    ],
    [string],
    "payable"
  >
  getFunction(
    nameOrSignature: "executeMulti",
  ): TypedContractMethod<
    [executeMsgs: IWasm.WasmExecuteMsgStruct[]],
    [string[]],
    "payable"
  >
  getFunction(
    nameOrSignature: "instantiate",
  ): TypedContractMethod<
    [
      admin: string,
      codeID: BigNumberish,
      msgArgs: BytesLike,
      label: string,
      funds: INibiruEvm.BankCoinStruct[],
    ],
    [[string, string] & { contractAddr: string; data: string }],
    "payable"
  >
  getFunction(
    nameOrSignature: "query",
  ): TypedContractMethod<
    [contractAddr: string, req: BytesLike],
    [string],
    "view"
  >
  getFunction(
    nameOrSignature: "queryRaw",
  ): TypedContractMethod<
    [contractAddr: string, key: BytesLike],
    [string],
    "view"
  >

  getEvent(
    key: "AbciEvent",
  ): TypedContractEvent<
    AbciEventEvent.InputTuple,
    AbciEventEvent.OutputTuple,
    AbciEventEvent.OutputObject
  >

  filters: {
    "AbciEvent(string,string)": TypedContractEvent<
      AbciEventEvent.InputTuple,
      AbciEventEvent.OutputTuple,
      AbciEventEvent.OutputObject
    >
    AbciEvent: TypedContractEvent<
      AbciEventEvent.InputTuple,
      AbciEventEvent.OutputTuple,
      AbciEventEvent.OutputObject
    >
  }
}
