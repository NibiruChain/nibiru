// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nibiru/txfees/v1/feetoken.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The conversion rate of the convertible fee token to the native token (nibiru) is 1:1.
// The conversion rate of the swappable fee token to the native token (nibiru) is based on oracle price.
type FeeTokenType int32

const (
	FeeTokenType_FEE_TOKEN_TYPE_CONVERTIBLE FeeTokenType = 0
	FeeTokenType_FEE_TOKEN_TYPE_SWAPPABLE   FeeTokenType = 1
)

var FeeTokenType_name = map[int32]string{
	0: "FEE_TOKEN_TYPE_CONVERTIBLE",
	1: "FEE_TOKEN_TYPE_SWAPPABLE",
}

var FeeTokenType_value = map[string]int32{
	"FEE_TOKEN_TYPE_CONVERTIBLE": 0,
	"FEE_TOKEN_TYPE_SWAPPABLE":   1,
}

func (x FeeTokenType) String() string {
	return proto.EnumName(FeeTokenType_name, int32(x))
}

func (FeeTokenType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2bf4d9e8f6f1603a, []int{0}
}

// FeeToken is a struct that specifies a token that can be used as a transaction fee asset in the Nibiru network.
type FeeToken struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty" yaml:"denom"`
	// A string identifier for the price pair
	Pair        string       `protobuf:"bytes,3,opt,name=pair,proto3" json:"pair,omitempty" yaml:"pair"`
	TokenType   FeeTokenType `protobuf:"varint,4,opt,name=token_type,json=tokenType,proto3,enum=nibiru.txfees.v1.FeeTokenType" json:"token_type,omitempty" yaml:"type"`
	PoolAddress string       `protobuf:"bytes,5,opt,name=pool_address,json=poolAddress,proto3" json:"pool_address,omitempty" yaml:"pool_address"`
}

func (m *FeeToken) Reset()         { *m = FeeToken{} }
func (m *FeeToken) String() string { return proto.CompactTextString(m) }
func (*FeeToken) ProtoMessage()    {}
func (*FeeToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bf4d9e8f6f1603a, []int{0}
}
func (m *FeeToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeToken.Merge(m, src)
}
func (m *FeeToken) XXX_Size() int {
	return m.Size()
}
func (m *FeeToken) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeToken.DiscardUnknown(m)
}

var xxx_messageInfo_FeeToken proto.InternalMessageInfo

func (m *FeeToken) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FeeToken) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *FeeToken) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *FeeToken) GetTokenType() FeeTokenType {
	if m != nil {
		return m.TokenType
	}
	return FeeTokenType_FEE_TOKEN_TYPE_CONVERTIBLE
}

func (m *FeeToken) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func init() {
	proto.RegisterEnum("nibiru.txfees.v1.FeeTokenType", FeeTokenType_name, FeeTokenType_value)
	proto.RegisterType((*FeeToken)(nil), "nibiru.txfees.v1.FeeToken")
}

func init() { proto.RegisterFile("nibiru/txfees/v1/feetoken.proto", fileDescriptor_2bf4d9e8f6f1603a) }

var fileDescriptor_2bf4d9e8f6f1603a = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcf, 0x6a, 0xea, 0x40,
	0x14, 0xc6, 0x33, 0x5e, 0xef, 0x1f, 0x47, 0xb9, 0x95, 0xb4, 0xd0, 0x20, 0x65, 0x22, 0xd3, 0x8d,
	0xb8, 0xc8, 0xa0, 0xdd, 0xb9, 0x53, 0x89, 0x20, 0x95, 0x28, 0x69, 0x68, 0x69, 0x37, 0x21, 0xd6,
	0x51, 0x43, 0x4d, 0x26, 0x24, 0x51, 0xf4, 0x2d, 0x4a, 0x9f, 0xa0, 0x8f, 0xd3, 0xa5, 0xcb, 0xae,
	0xa4, 0xe8, 0xa6, 0x6b, 0x9f, 0xa0, 0xcc, 0xc4, 0x80, 0xb8, 0x9b, 0x39, 0xbf, 0xef, 0x9c, 0xf3,
	0x1d, 0x3e, 0xa8, 0xfa, 0xee, 0xd0, 0x0d, 0xe7, 0x24, 0x5e, 0x8e, 0x29, 0x8d, 0xc8, 0xa2, 0x46,
	0xc6, 0x94, 0xc6, 0xec, 0x85, 0xfa, 0x5a, 0x10, 0xb2, 0x98, 0xc9, 0xc5, 0x44, 0xa0, 0x25, 0x02,
	0x6d, 0x51, 0x2b, 0x5d, 0x4c, 0xd8, 0x84, 0x09, 0x48, 0xf8, 0x2b, 0xd1, 0xe1, 0xb7, 0x0c, 0xfc,
	0xd7, 0xa1, 0xd4, 0xe2, 0xad, 0xf2, 0x35, 0xcc, 0xfa, 0x8e, 0x47, 0x15, 0x50, 0x06, 0x95, 0x5c,
	0xeb, 0x6c, 0xbf, 0x51, 0xf3, 0x2b, 0xc7, 0x9b, 0x35, 0x30, 0xaf, 0x62, 0x53, 0x40, 0xb9, 0x0a,
	0xff, 0x3a, 0xa3, 0x51, 0x48, 0xa3, 0x48, 0xc9, 0x08, 0x5d, 0x71, 0xbf, 0x51, 0x0b, 0x89, 0x6e,
	0x44, 0x7d, 0xe6, 0x61, 0x33, 0x15, 0xf0, 0x81, 0x81, 0xe3, 0x86, 0xca, 0xaf, 0xd3, 0x81, 0xbc,
	0x8a, 0x4d, 0x01, 0x65, 0x03, 0x42, 0xe1, 0xdc, 0x8e, 0x57, 0x01, 0x55, 0xb2, 0x65, 0x50, 0xf9,
	0x5f, 0x47, 0xda, 0xa9, 0x7f, 0x2d, 0x75, 0x69, 0xad, 0x02, 0x7a, 0x3c, 0x8a, 0x77, 0x61, 0x33,
	0x17, 0xa7, 0x4c, 0x6e, 0xc0, 0x42, 0xc0, 0xd8, 0xcc, 0x4e, 0x5d, 0xfe, 0x16, 0xcb, 0x2f, 0xf7,
	0x1b, 0xf5, 0xfc, 0xb0, 0xfc, 0x88, 0x62, 0x33, 0xcf, 0xbf, 0xcd, 0xe4, 0xd7, 0xc8, 0x7e, 0xbf,
	0xab, 0xa0, 0xda, 0x83, 0x85, 0xe3, 0x6d, 0x32, 0x82, 0xa5, 0x8e, 0xae, 0xdb, 0x56, 0xff, 0x56,
	0x37, 0x6c, 0xeb, 0x71, 0xa0, 0xdb, 0xed, 0xbe, 0x71, 0xaf, 0x9b, 0x56, 0xb7, 0xd5, 0xd3, 0x8b,
	0x92, 0x7c, 0x05, 0x95, 0x13, 0x7e, 0xf7, 0xd0, 0x1c, 0x0c, 0x9a, 0x9c, 0x82, 0x56, 0xf7, 0x63,
	0x8b, 0xc0, 0x7a, 0x8b, 0xc0, 0xd7, 0x16, 0x81, 0xd7, 0x1d, 0x92, 0xd6, 0x3b, 0x24, 0x7d, 0xee,
	0x90, 0xf4, 0x44, 0x26, 0x6e, 0x3c, 0x9d, 0x0f, 0xb5, 0x67, 0xe6, 0x11, 0x43, 0xdc, 0xdb, 0x9e,
	0x3a, 0xae, 0x4f, 0x0e, 0xe1, 0x2e, 0xea, 0x64, 0x99, 0x26, 0xcc, 0xaf, 0x8c, 0x86, 0x7f, 0x44,
	0x68, 0x37, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x86, 0x9a, 0x64, 0xff, 0x01, 0x00, 0x00,
}

func (this *FeeToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeeToken)
	if !ok {
		that2, ok := that.(FeeToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Pair != that1.Pair {
		return false
	}
	if this.TokenType != that1.TokenType {
		return false
	}
	if this.PoolAddress != that1.PoolAddress {
		return false
	}
	return true
}
func (m *FeeToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolAddress) > 0 {
		i -= len(m.PoolAddress)
		copy(dAtA[i:], m.PoolAddress)
		i = encodeVarintFeetoken(dAtA, i, uint64(len(m.PoolAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TokenType != 0 {
		i = encodeVarintFeetoken(dAtA, i, uint64(m.TokenType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Pair) > 0 {
		i -= len(m.Pair)
		copy(dAtA[i:], m.Pair)
		i = encodeVarintFeetoken(dAtA, i, uint64(len(m.Pair)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintFeetoken(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFeetoken(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFeetoken(dAtA []byte, offset int, v uint64) int {
	offset -= sovFeetoken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FeeToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFeetoken(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovFeetoken(uint64(l))
	}
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovFeetoken(uint64(l))
	}
	if m.TokenType != 0 {
		n += 1 + sovFeetoken(uint64(m.TokenType))
	}
	l = len(m.PoolAddress)
	if l > 0 {
		n += 1 + l + sovFeetoken(uint64(l))
	}
	return n
}

func sovFeetoken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFeetoken(x uint64) (n int) {
	return sovFeetoken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeeToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeetoken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeetoken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeetoken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeetoken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeetoken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeetoken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeetoken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			m.TokenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenType |= FeeTokenType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeetoken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeetoken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeetoken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeetoken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeetoken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFeetoken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFeetoken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeetoken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeetoken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFeetoken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFeetoken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFeetoken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFeetoken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFeetoken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFeetoken = fmt.Errorf("proto: unexpected end of group")
)
