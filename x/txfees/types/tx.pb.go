// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nibiru/txfees/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FeeTokenUpdateAction int32

const (
	FeeTokenUpdateAction_FEE_TOKEN_ACTION_ADD    FeeTokenUpdateAction = 0
	FeeTokenUpdateAction_FEE_TOKEN_ACTION_REMOVE FeeTokenUpdateAction = 1
)

var FeeTokenUpdateAction_name = map[int32]string{
	0: "FEE_TOKEN_ACTION_ADD",
	1: "FEE_TOKEN_ACTION_REMOVE",
}

var FeeTokenUpdateAction_value = map[string]int32{
	"FEE_TOKEN_ACTION_ADD":    0,
	"FEE_TOKEN_ACTION_REMOVE": 1,
}

func (x FeeTokenUpdateAction) String() string {
	return proto.EnumName(FeeTokenUpdateAction_name, int32(x))
}

func (FeeTokenUpdateAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_40a71a129e46ef24, []int{0}
}

// MsgUpdateFeeToken defines a message that update fee token
type MsgUpdateFeeToken struct {
	// contract_address in hex format
	FeeToken *FeeToken `protobuf:"bytes,1,opt,name=fee_token,json=feeToken,proto3" json:"fee_token,omitempty"`
	// Authority: Address of the governance module account.
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// action defines the action to perform on the fee token
	Action FeeTokenUpdateAction `protobuf:"varint,3,opt,name=action,proto3,enum=nibiru.txfees.v1.FeeTokenUpdateAction" json:"action,omitempty"`
}

func (m *MsgUpdateFeeToken) Reset()         { *m = MsgUpdateFeeToken{} }
func (m *MsgUpdateFeeToken) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateFeeToken) ProtoMessage()    {}
func (*MsgUpdateFeeToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a71a129e46ef24, []int{0}
}
func (m *MsgUpdateFeeToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateFeeToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateFeeToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateFeeToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateFeeToken.Merge(m, src)
}
func (m *MsgUpdateFeeToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateFeeToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateFeeToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateFeeToken proto.InternalMessageInfo

func (m *MsgUpdateFeeToken) GetFeeToken() *FeeToken {
	if m != nil {
		return m.FeeToken
	}
	return nil
}

func (m *MsgUpdateFeeToken) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgUpdateFeeToken) GetAction() FeeTokenUpdateAction {
	if m != nil {
		return m.Action
	}
	return FeeTokenUpdateAction_FEE_TOKEN_ACTION_ADD
}

// MsgUpdateFeeTokenResponse defines the MsgUpdateFeeToken response type
type MsgUpdateFeeTokenResponse struct {
}

func (m *MsgUpdateFeeTokenResponse) Reset()         { *m = MsgUpdateFeeTokenResponse{} }
func (m *MsgUpdateFeeTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateFeeTokenResponse) ProtoMessage()    {}
func (*MsgUpdateFeeTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a71a129e46ef24, []int{1}
}
func (m *MsgUpdateFeeTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateFeeTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateFeeTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateFeeTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateFeeTokenResponse.Merge(m, src)
}
func (m *MsgUpdateFeeTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateFeeTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateFeeTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateFeeTokenResponse proto.InternalMessageInfo

// MsgUpdateParams defines a message that updates the parameters of the txfees module
type MsgUpdateParams struct {
	// params defines the parameters to update
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// Authority: Address of the governance module account.
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a71a129e46ef24, []int{2}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *MsgUpdateParams) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgUpdateParamsResponse defines the MsgUpdateParams response type
type MsgUpdateParamsResponse struct {
	// params defines the updated parameters
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a71a129e46ef24, []int{3}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func (m *MsgUpdateParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterEnum("nibiru.txfees.v1.FeeTokenUpdateAction", FeeTokenUpdateAction_name, FeeTokenUpdateAction_value)
	proto.RegisterType((*MsgUpdateFeeToken)(nil), "nibiru.txfees.v1.MsgUpdateFeeToken")
	proto.RegisterType((*MsgUpdateFeeTokenResponse)(nil), "nibiru.txfees.v1.MsgUpdateFeeTokenResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "nibiru.txfees.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "nibiru.txfees.v1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("nibiru/txfees/v1/tx.proto", fileDescriptor_40a71a129e46ef24) }

var fileDescriptor_40a71a129e46ef24 = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x4f, 0x8b, 0xd3, 0x4e,
	0x18, 0xc7, 0x3b, 0xdd, 0xa5, 0xfc, 0x76, 0x7e, 0xb2, 0xd6, 0x50, 0xd8, 0x34, 0xab, 0x69, 0x37,
	0x8a, 0xd6, 0x15, 0x33, 0x6e, 0x05, 0x05, 0x0f, 0x42, 0xbb, 0x9b, 0x85, 0x45, 0xda, 0x6a, 0xac,
	0x1e, 0xbc, 0x84, 0xb4, 0x99, 0x64, 0x83, 0x36, 0x13, 0x32, 0x93, 0x52, 0x8f, 0x0a, 0x5e, 0x45,
	0xf0, 0x2e, 0xbe, 0x08, 0x5f, 0x82, 0x87, 0x3d, 0x2e, 0x7a, 0xf1, 0x24, 0xd2, 0x7a, 0xf0, 0x65,
	0x48, 0x67, 0x26, 0x05, 0x1b, 0xd7, 0x7f, 0xb7, 0x0c, 0xdf, 0xef, 0xf3, 0xcc, 0xe7, 0xfb, 0xcc,
	0x13, 0x58, 0x8d, 0xc2, 0x41, 0x98, 0xa4, 0x88, 0x4d, 0x7c, 0x8c, 0x29, 0x1a, 0xef, 0x20, 0x36,
	0x31, 0xe3, 0x84, 0x30, 0xa2, 0x94, 0x85, 0x64, 0x0a, 0xc9, 0x1c, 0xef, 0x68, 0x95, 0x80, 0x04,
	0x84, 0x8b, 0x68, 0xfe, 0x25, 0x7c, 0xda, 0xd9, 0x80, 0x90, 0xe0, 0x09, 0x46, 0x6e, 0x1c, 0x22,
	0x37, 0x8a, 0x08, 0x73, 0x59, 0x48, 0x22, 0x2a, 0x55, 0x5d, 0xaa, 0xfc, 0x34, 0x48, 0x7d, 0xe4,
	0xa5, 0x09, 0x37, 0x48, 0xbd, 0x3a, 0x24, 0x74, 0x44, 0xa8, 0x23, 0xda, 0x8a, 0x83, 0x94, 0x6a,
	0x39, 0x36, 0x1f, 0x63, 0x46, 0x1e, 0xe3, 0xac, 0xf6, 0x5c, 0xce, 0x10, 0xbb, 0x89, 0x3b, 0x92,
	0xf5, 0xc6, 0x7b, 0x00, 0xcf, 0x74, 0x68, 0xf0, 0x20, 0xf6, 0x5c, 0x86, 0xf7, 0x31, 0xee, 0xcf,
	0x4b, 0x95, 0x9b, 0x70, 0xcd, 0xc7, 0xd8, 0xe1, 0x7d, 0x54, 0x50, 0x07, 0x8d, 0xff, 0x9b, 0x9a,
	0xb9, 0x1c, 0xd5, 0xcc, 0xec, 0xf6, 0x7f, 0x7e, 0x56, 0x78, 0x0d, 0x96, 0x28, 0x8e, 0x3c, 0x9c,
	0xa8, 0xc5, 0x3a, 0x68, 0xac, 0xb5, 0xd5, 0x0f, 0xef, 0xae, 0x56, 0x24, 0x70, 0xcb, 0xf3, 0x12,
	0x4c, 0xe9, 0x7d, 0x96, 0x84, 0x51, 0x60, 0x4b, 0x9f, 0x72, 0x1b, 0x96, 0xdc, 0xe1, 0x3c, 0xab,
	0xba, 0x52, 0x07, 0x8d, 0xf5, 0xe6, 0xc5, 0x93, 0xef, 0x11, 0x90, 0x2d, 0xee, 0xb6, 0x65, 0xd5,
	0xad, 0xd5, 0x6f, 0x6f, 0x6b, 0xc0, 0xd8, 0x84, 0xd5, 0x5c, 0x0a, 0x1b, 0xd3, 0x98, 0x44, 0x14,
	0x1b, 0xcf, 0x00, 0x3c, 0xbd, 0x50, 0xef, 0xf2, 0xf4, 0xca, 0x0d, 0x58, 0x12, 0x73, 0x90, 0xf1,
	0xd4, 0xfc, 0xb5, 0xc2, 0xd9, 0x5e, 0x3d, 0xfa, 0x5c, 0x2b, 0xd8, 0xd2, 0xfd, 0xf7, 0x01, 0x25,
	0xe0, 0x3d, 0xb8, 0xb1, 0x84, 0x90, 0xe1, 0xfd, 0x2b, 0xca, 0x76, 0x07, 0x56, 0x7e, 0x36, 0x19,
	0x45, 0x85, 0x95, 0x7d, 0xcb, 0x72, 0xfa, 0xbd, 0x3b, 0x56, 0xd7, 0x69, 0xed, 0xf6, 0x0f, 0x7a,
	0x5d, 0xa7, 0xb5, 0xb7, 0x57, 0x2e, 0x28, 0x9b, 0x70, 0x23, 0xa7, 0xd8, 0x56, 0xa7, 0xf7, 0xd0,
	0x2a, 0x83, 0xe6, 0x9b, 0x22, 0x5c, 0xe9, 0xd0, 0x40, 0x79, 0x09, 0xe0, 0xfa, 0xd2, 0x3a, 0x9c,
	0xcf, 0x13, 0xe5, 0xa6, 0xad, 0x5d, 0xf9, 0x03, 0xd3, 0xe2, 0x49, 0xb6, 0x9f, 0x7f, 0xfc, 0xfa,
	0xba, 0x78, 0xc1, 0x30, 0x50, 0x6e, 0x3d, 0x53, 0x5e, 0xe1, 0x2c, 0xf6, 0x4f, 0x79, 0x01, 0xe0,
	0xa9, 0x1f, 0xde, 0x6e, 0xeb, 0x17, 0x37, 0x09, 0x8b, 0x76, 0xf9, 0xb7, 0x96, 0x05, 0xca, 0x25,
	0x8e, 0xb2, 0x65, 0xd4, 0x4e, 0x44, 0x11, 0xf3, 0x6e, 0x1f, 0x1c, 0x4d, 0x75, 0x70, 0x3c, 0xd5,
	0xc1, 0x97, 0xa9, 0x0e, 0x5e, 0xcd, 0xf4, 0xc2, 0xf1, 0x4c, 0x2f, 0x7c, 0x9a, 0xe9, 0x85, 0x47,
	0x28, 0x08, 0xd9, 0x61, 0x3a, 0x30, 0x87, 0x64, 0x84, 0xba, 0xbc, 0xc9, 0xee, 0xa1, 0x1b, 0x46,
	0x59, 0xc3, 0x71, 0x13, 0x4d, 0xb2, 0xae, 0xec, 0x69, 0x8c, 0xe9, 0xa0, 0xc4, 0x7f, 0xbe, 0xeb,
	0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x51, 0x20, 0x4d, 0xe4, 0x5a, 0x04, 0x00, 0x00,
}

func (this *MsgUpdateFeeToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUpdateFeeToken)
	if !ok {
		that2, ok := that.(MsgUpdateFeeToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FeeToken.Equal(that1.FeeToken) {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	return true
}
func (this *MsgUpdateParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUpdateParams)
	if !ok {
		that2, ok := that.(MsgUpdateParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Params.Equal(&that1.Params) {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterFeeShare registers a new contract for receiving transaction fees
	UpdateFeeToken(ctx context.Context, in *MsgUpdateFeeToken, opts ...grpc.CallOption) (*MsgUpdateFeeTokenResponse, error)
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateFeeToken(ctx context.Context, in *MsgUpdateFeeToken, opts ...grpc.CallOption) (*MsgUpdateFeeTokenResponse, error) {
	out := new(MsgUpdateFeeTokenResponse)
	err := c.cc.Invoke(ctx, "/nibiru.txfees.v1.Msg/UpdateFeeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/nibiru.txfees.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterFeeShare registers a new contract for receiving transaction fees
	UpdateFeeToken(context.Context, *MsgUpdateFeeToken) (*MsgUpdateFeeTokenResponse, error)
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateFeeToken(ctx context.Context, req *MsgUpdateFeeToken) (*MsgUpdateFeeTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeeToken not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateFeeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateFeeToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateFeeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.txfees.v1.Msg/UpdateFeeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateFeeToken(ctx, req.(*MsgUpdateFeeToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.txfees.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nibiru.txfees.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateFeeToken",
			Handler:    _Msg_UpdateFeeToken_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nibiru/txfees/v1/tx.proto",
}

func (m *MsgUpdateFeeToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateFeeToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateFeeToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.FeeToken != nil {
		{
			size, err := m.FeeToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateFeeTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateFeeTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateFeeTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateFeeToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeeToken != nil {
		l = m.FeeToken.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovTx(uint64(m.Action))
	}
	return n
}

func (m *MsgUpdateFeeTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateFeeToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateFeeToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateFeeToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeToken == nil {
				m.FeeToken = &FeeToken{}
			}
			if err := m.FeeToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= FeeTokenUpdateAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateFeeTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateFeeTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateFeeTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
