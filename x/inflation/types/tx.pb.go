// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nibiru/inflation/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgToggleInflation defines a message to enable or disable inflation.
type MsgToggleInflation struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Enable bool   `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty" yaml:"enable"`
}

func (m *MsgToggleInflation) Reset()         { *m = MsgToggleInflation{} }
func (m *MsgToggleInflation) String() string { return proto.CompactTextString(m) }
func (*MsgToggleInflation) ProtoMessage()    {}
func (*MsgToggleInflation) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f6843f876608d76, []int{0}
}
func (m *MsgToggleInflation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleInflation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleInflation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleInflation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleInflation.Merge(m, src)
}
func (m *MsgToggleInflation) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleInflation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleInflation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleInflation proto.InternalMessageInfo

type MsgEditInflationParams struct {
	Sender                string                        `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	InflationEnabled      bool                          `protobuf:"varint,2,opt,name=inflation_enabled,json=inflationEnabled,proto3" json:"inflation_enabled,omitempty"`
	PolynomialFactors     []cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,rep,name=polynomial_factors,json=polynomialFactors,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"polynomial_factors,omitempty"`
	InflationDistribution *InflationDistribution        `protobuf:"bytes,4,opt,name=inflation_distribution,json=inflationDistribution,proto3" json:"inflation_distribution,omitempty"`
	EpochsPerPeriod       *cosmossdk_io_math.Int        `protobuf:"bytes,5,opt,name=epochs_per_period,json=epochsPerPeriod,proto3,customtype=cosmossdk.io/math.Int" json:"epochs_per_period,omitempty"`
	PeriodsPerYear        *cosmossdk_io_math.Int        `protobuf:"bytes,6,opt,name=periods_per_year,json=periodsPerYear,proto3,customtype=cosmossdk.io/math.Int" json:"periods_per_year,omitempty"`
	MaxPeriod             *cosmossdk_io_math.Int        `protobuf:"bytes,7,opt,name=max_period,json=maxPeriod,proto3,customtype=cosmossdk.io/math.Int" json:"max_period,omitempty"`
}

func (m *MsgEditInflationParams) Reset()         { *m = MsgEditInflationParams{} }
func (m *MsgEditInflationParams) String() string { return proto.CompactTextString(m) }
func (*MsgEditInflationParams) ProtoMessage()    {}
func (*MsgEditInflationParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f6843f876608d76, []int{1}
}
func (m *MsgEditInflationParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditInflationParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditInflationParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditInflationParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditInflationParams.Merge(m, src)
}
func (m *MsgEditInflationParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditInflationParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditInflationParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditInflationParams proto.InternalMessageInfo

type MsgToggleInflationResponse struct {
}

func (m *MsgToggleInflationResponse) Reset()         { *m = MsgToggleInflationResponse{} }
func (m *MsgToggleInflationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgToggleInflationResponse) ProtoMessage()    {}
func (*MsgToggleInflationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f6843f876608d76, []int{2}
}
func (m *MsgToggleInflationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleInflationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleInflationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleInflationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleInflationResponse.Merge(m, src)
}
func (m *MsgToggleInflationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleInflationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleInflationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleInflationResponse proto.InternalMessageInfo

type MsgEditInflationParamsResponse struct {
}

func (m *MsgEditInflationParamsResponse) Reset()         { *m = MsgEditInflationParamsResponse{} }
func (m *MsgEditInflationParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEditInflationParamsResponse) ProtoMessage()    {}
func (*MsgEditInflationParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f6843f876608d76, []int{3}
}
func (m *MsgEditInflationParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditInflationParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditInflationParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditInflationParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditInflationParamsResponse.Merge(m, src)
}
func (m *MsgEditInflationParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditInflationParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditInflationParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditInflationParamsResponse proto.InternalMessageInfo

// MsgBurn: allows burning of any token
type MsgBurn struct {
	Sender string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Coin   types.Coin `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin" yaml:"coin"`
}

func (m *MsgBurn) Reset()         { *m = MsgBurn{} }
func (m *MsgBurn) String() string { return proto.CompactTextString(m) }
func (*MsgBurn) ProtoMessage()    {}
func (*MsgBurn) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f6843f876608d76, []int{4}
}
func (m *MsgBurn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurn.Merge(m, src)
}
func (m *MsgBurn) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurn) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurn.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurn proto.InternalMessageInfo

func (m *MsgBurn) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgBurn) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

type MsgBurnResponse struct {
}

func (m *MsgBurnResponse) Reset()         { *m = MsgBurnResponse{} }
func (m *MsgBurnResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnResponse) ProtoMessage()    {}
func (*MsgBurnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f6843f876608d76, []int{5}
}
func (m *MsgBurnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnResponse.Merge(m, src)
}
func (m *MsgBurnResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgToggleInflation)(nil), "nibiru.inflation.v1.MsgToggleInflation")
	proto.RegisterType((*MsgEditInflationParams)(nil), "nibiru.inflation.v1.MsgEditInflationParams")
	proto.RegisterType((*MsgToggleInflationResponse)(nil), "nibiru.inflation.v1.MsgToggleInflationResponse")
	proto.RegisterType((*MsgEditInflationParamsResponse)(nil), "nibiru.inflation.v1.MsgEditInflationParamsResponse")
	proto.RegisterType((*MsgBurn)(nil), "nibiru.inflation.v1.MsgBurn")
	proto.RegisterType((*MsgBurnResponse)(nil), "nibiru.inflation.v1.MsgBurnResponse")
}

func init() { proto.RegisterFile("nibiru/inflation/v1/tx.proto", fileDescriptor_9f6843f876608d76) }

var fileDescriptor_9f6843f876608d76 = []byte{
	// 693 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x4e, 0xdb, 0x4a,
	0x14, 0x8d, 0x21, 0x2f, 0xc0, 0xa0, 0xf7, 0x20, 0xe6, 0x81, 0x42, 0xe0, 0x39, 0x91, 0x59, 0x10,
	0x1e, 0xc2, 0xa3, 0x84, 0x1d, 0x4b, 0x03, 0x95, 0xa8, 0x48, 0x15, 0x59, 0xad, 0xaa, 0x76, 0x93,
	0x4e, 0xec, 0xc1, 0x19, 0xd5, 0x9e, 0xb1, 0x3c, 0x93, 0x28, 0xd9, 0x76, 0xd5, 0x25, 0x52, 0x7f,
	0x80, 0x65, 0x57, 0x5d, 0xf5, 0x0f, 0xba, 0x61, 0x89, 0xda, 0x4d, 0xd5, 0x45, 0x54, 0x41, 0x17,
	0x5d, 0xf3, 0x05, 0x95, 0x3d, 0x8e, 0x89, 0x1a, 0x23, 0x95, 0x45, 0xa4, 0xdc, 0x39, 0xf7, 0x9e,
	0x7b, 0xee, 0xf8, 0xdc, 0x01, 0x9b, 0x94, 0x74, 0x48, 0xd8, 0x83, 0x84, 0x9e, 0x79, 0x48, 0x10,
	0x46, 0x61, 0xbf, 0x0e, 0xc5, 0xc0, 0x08, 0x42, 0x26, 0x98, 0xba, 0x22, 0x51, 0x23, 0x45, 0x8d,
	0x7e, 0xbd, 0xfc, 0xaf, 0xcb, 0x5c, 0x16, 0xe3, 0x30, 0xfa, 0x27, 0x53, 0xcb, 0x9b, 0x2e, 0x63,
	0xae, 0x87, 0x21, 0x0a, 0x08, 0x44, 0x94, 0x32, 0x11, 0xe7, 0xf3, 0x04, 0xdd, 0xca, 0x6a, 0x73,
	0xc7, 0x2a, 0x93, 0x34, 0x9b, 0x71, 0x9f, 0x71, 0xd8, 0x41, 0x1c, 0xc3, 0x7e, 0xbd, 0x83, 0x05,
	0xaa, 0x43, 0x9b, 0x91, 0x31, 0xbe, 0x2e, 0xf1, 0xb6, 0xec, 0x2d, 0x03, 0x09, 0xe9, 0x08, 0xa8,
	0x4d, 0xee, 0x3e, 0x65, 0xae, 0xeb, 0xe1, 0x93, 0x31, 0xad, 0xba, 0x06, 0x0a, 0x1c, 0x53, 0x07,
	0x87, 0x25, 0xa5, 0xaa, 0xd4, 0x16, 0xac, 0x24, 0x52, 0x77, 0x40, 0x01, 0x53, 0xd4, 0xf1, 0x70,
	0x69, 0xa6, 0xaa, 0xd4, 0xe6, 0xcd, 0xe2, 0xed, 0xa8, 0xf2, 0xf7, 0x10, 0xf9, 0xde, 0x81, 0x2e,
	0xcf, 0x75, 0x2b, 0x49, 0x38, 0x98, 0x7f, 0x7b, 0x51, 0xc9, 0xfd, 0xbc, 0xa8, 0xe4, 0xf4, 0x0f,
	0x79, 0xb0, 0xd6, 0xe4, 0xee, 0xb1, 0x43, 0x44, 0xda, 0xa1, 0x85, 0x42, 0xe4, 0xf3, 0x7b, 0xfb,
	0xec, 0x82, 0x62, 0x3a, 0x63, 0x5b, 0x12, 0x3a, 0xb2, 0xa5, 0xb5, 0x9c, 0x02, 0xc7, 0xf2, 0x5c,
	0x7d, 0x05, 0xd4, 0x80, 0x79, 0x43, 0xca, 0x7c, 0x82, 0xbc, 0xf6, 0x19, 0xb2, 0x05, 0x0b, 0x79,
	0x69, 0xb6, 0x3a, 0x5b, 0x5b, 0x30, 0xeb, 0x97, 0xa3, 0x8a, 0xf2, 0x6d, 0x54, 0xd9, 0x90, 0x43,
	0x73, 0xe7, 0xb5, 0x41, 0x18, 0xf4, 0x91, 0xe8, 0x1a, 0xa7, 0xd8, 0x45, 0xf6, 0xf0, 0x08, 0xdb,
	0x9f, 0x3f, 0xee, 0x81, 0xe4, 0x4e, 0x8e, 0xb0, 0x6d, 0x15, 0xef, 0xc8, 0x1e, 0x49, 0x2e, 0xd5,
	0x05, 0x6b, 0x77, 0x72, 0x1c, 0xc2, 0x45, 0x48, 0x3a, 0xbd, 0x28, 0x28, 0xe5, 0xab, 0x4a, 0x6d,
	0xb1, 0xf1, 0xbf, 0x91, 0xf1, 0xb9, 0x8d, 0x74, 0xd8, 0xa3, 0x89, 0x0a, 0x33, 0x1f, 0x29, 0xb2,
	0x56, 0x49, 0x16, 0xa8, 0x3e, 0x07, 0x45, 0x1c, 0x30, 0xbb, 0xcb, 0xdb, 0x01, 0x0e, 0xa3, 0x1f,
	0x61, 0x4e, 0xe9, 0xaf, 0xe8, 0x6a, 0xcc, 0xdd, 0x64, 0x92, 0xd5, 0xe9, 0x49, 0x4e, 0xa8, 0x98,
	0x98, 0xe1, 0x84, 0x0a, 0x6b, 0x49, 0xb2, 0xb4, 0x70, 0xd8, 0x8a, 0x39, 0xd4, 0x67, 0x60, 0x59,
	0xb2, 0x49, 0xe6, 0x21, 0x46, 0x61, 0xa9, 0xf0, 0x70, 0xde, 0x7f, 0x12, 0x92, 0x16, 0x0e, 0x5f,
	0x60, 0x14, 0xaa, 0x8f, 0x01, 0xf0, 0xd1, 0x60, 0x2c, 0x74, 0xee, 0xe1, 0x84, 0x0b, 0x3e, 0x1a,
	0x48, 0x89, 0x13, 0x86, 0xd9, 0x04, 0xe5, 0x69, 0x4f, 0x5a, 0x98, 0x07, 0x8c, 0x72, 0xac, 0x57,
	0x81, 0x96, 0xed, 0xa6, 0x34, 0x63, 0x00, 0xe6, 0x9a, 0xdc, 0x35, 0x7b, 0x21, 0x8d, 0x0c, 0x3b,
	0x69, 0xb0, 0x49, 0xc3, 0xca, 0x73, 0x3d, 0xf5, 0x9c, 0x09, 0xf2, 0xd1, 0xca, 0xc4, 0x36, 0x5b,
	0x6c, 0xac, 0x1b, 0x89, 0xca, 0x68, 0xa7, 0x8c, 0x64, 0xa7, 0x8c, 0x43, 0x46, 0xa8, 0xb9, 0x72,
	0x39, 0xaa, 0xe4, 0x6e, 0x47, 0x95, 0x45, 0xc9, 0x13, 0x15, 0xe9, 0x56, 0x5c, 0xab, 0x17, 0xc1,
	0x52, 0xd2, 0x79, 0x2c, 0xa6, 0xf1, 0x69, 0x06, 0xcc, 0x36, 0xb9, 0xab, 0x9e, 0x2b, 0x60, 0xe9,
	0xf7, 0x35, 0xdb, 0xce, 0xf4, 0xcd, 0xf4, 0xec, 0x65, 0xf8, 0x87, 0x89, 0xe9, 0x15, 0x6c, 0xbd,
	0xf9, 0xf2, 0xe3, 0xdd, 0xcc, 0x7f, 0xfa, 0x06, 0xcc, 0x7c, 0xa6, 0xe2, 0x2a, 0xf5, 0xbd, 0x02,
	0x56, 0xb2, 0xb6, 0x72, 0xf7, 0xbe, 0x6e, 0x19, 0xc9, 0xe5, 0xfd, 0x07, 0x24, 0xa7, 0xf2, 0x60,
	0x2c, 0x6f, 0x47, 0xdf, 0x9e, 0x96, 0x87, 0x1d, 0x22, 0xf6, 0xd2, 0x70, 0x2f, 0x88, 0x0b, 0xcd,
	0xd3, 0xcb, 0x6b, 0x4d, 0xb9, 0xba, 0xd6, 0x94, 0xef, 0xd7, 0x9a, 0x72, 0x7e, 0xa3, 0xe5, 0xae,
	0x6e, 0xb4, 0xdc, 0xd7, 0x1b, 0x2d, 0xf7, 0xb2, 0xe1, 0x12, 0xd1, 0xed, 0x75, 0x0c, 0x9b, 0xf9,
	0xf0, 0x49, 0x4c, 0x76, 0xd8, 0x45, 0x84, 0x8e, 0x89, 0xfb, 0x0d, 0x38, 0x98, 0x60, 0x17, 0xc3,
	0x00, 0xf3, 0x4e, 0x21, 0x7e, 0xfb, 0xf6, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x8c, 0xc0,
	0x00, 0xc4, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// ToggleInflation defines a method to enable or disable inflation.
	ToggleInflation(ctx context.Context, in *MsgToggleInflation, opts ...grpc.CallOption) (*MsgToggleInflationResponse, error)
	// EditInflationParams defines a method to edit the inflation params.
	EditInflationParams(ctx context.Context, in *MsgEditInflationParams, opts ...grpc.CallOption) (*MsgEditInflationParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ToggleInflation(ctx context.Context, in *MsgToggleInflation, opts ...grpc.CallOption) (*MsgToggleInflationResponse, error) {
	out := new(MsgToggleInflationResponse)
	err := c.cc.Invoke(ctx, "/nibiru.inflation.v1.Msg/ToggleInflation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditInflationParams(ctx context.Context, in *MsgEditInflationParams, opts ...grpc.CallOption) (*MsgEditInflationParamsResponse, error) {
	out := new(MsgEditInflationParamsResponse)
	err := c.cc.Invoke(ctx, "/nibiru.inflation.v1.Msg/EditInflationParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// ToggleInflation defines a method to enable or disable inflation.
	ToggleInflation(context.Context, *MsgToggleInflation) (*MsgToggleInflationResponse, error)
	// EditInflationParams defines a method to edit the inflation params.
	EditInflationParams(context.Context, *MsgEditInflationParams) (*MsgEditInflationParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ToggleInflation(ctx context.Context, req *MsgToggleInflation) (*MsgToggleInflationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleInflation not implemented")
}
func (*UnimplementedMsgServer) EditInflationParams(ctx context.Context, req *MsgEditInflationParams) (*MsgEditInflationParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditInflationParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ToggleInflation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgToggleInflation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ToggleInflation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.inflation.v1.Msg/ToggleInflation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ToggleInflation(ctx, req.(*MsgToggleInflation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditInflationParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditInflationParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditInflationParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.inflation.v1.Msg/EditInflationParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditInflationParams(ctx, req.(*MsgEditInflationParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nibiru.inflation.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToggleInflation",
			Handler:    _Msg_ToggleInflation_Handler,
		},
		{
			MethodName: "EditInflationParams",
			Handler:    _Msg_EditInflationParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nibiru/inflation/v1/tx.proto",
}

func (m *MsgToggleInflation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleInflation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleInflation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditInflationParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditInflationParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditInflationParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxPeriod != nil {
		{
			size := m.MaxPeriod.Size()
			i -= size
			if _, err := m.MaxPeriod.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.PeriodsPerYear != nil {
		{
			size := m.PeriodsPerYear.Size()
			i -= size
			if _, err := m.PeriodsPerYear.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.EpochsPerPeriod != nil {
		{
			size := m.EpochsPerPeriod.Size()
			i -= size
			if _, err := m.EpochsPerPeriod.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.InflationDistribution != nil {
		{
			size, err := m.InflationDistribution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.PolynomialFactors) > 0 {
		for iNdEx := len(m.PolynomialFactors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.PolynomialFactors[iNdEx].Size()
				i -= size
				if _, err := m.PolynomialFactors[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.InflationEnabled {
		i--
		if m.InflationEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgToggleInflationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleInflationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleInflationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEditInflationParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditInflationParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditInflationParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBurn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgToggleInflation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Enable {
		n += 2
	}
	return n
}

func (m *MsgEditInflationParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.InflationEnabled {
		n += 2
	}
	if len(m.PolynomialFactors) > 0 {
		for _, e := range m.PolynomialFactors {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.InflationDistribution != nil {
		l = m.InflationDistribution.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EpochsPerPeriod != nil {
		l = m.EpochsPerPeriod.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PeriodsPerYear != nil {
		l = m.PeriodsPerYear.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MaxPeriod != nil {
		l = m.MaxPeriod.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgToggleInflationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEditInflationParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBurn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBurnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgToggleInflation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleInflation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleInflation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditInflationParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditInflationParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditInflationParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflationEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InflationEnabled = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolynomialFactors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.PolynomialFactors = append(m.PolynomialFactors, v)
			if err := m.PolynomialFactors[len(m.PolynomialFactors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflationDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InflationDistribution == nil {
				m.InflationDistribution = &InflationDistribution{}
			}
			if err := m.InflationDistribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochsPerPeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.EpochsPerPeriod = &v
			if err := m.EpochsPerPeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodsPerYear", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.PeriodsPerYear = &v
			if err := m.PeriodsPerYear.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.MaxPeriod = &v
			if err := m.MaxPeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleInflationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleInflationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleInflationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditInflationParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditInflationParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditInflationParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
