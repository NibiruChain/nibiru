// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nibiru/devgas/v1/genesis.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the module's genesis state.
type GenesisState struct {
	// params are the feeshare module parameters
	Params ModuleParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// FeeShare is a slice of active registered contracts for fee distribution
	FeeShare []FeeShare `protobuf:"bytes,2,rep,name=fee_share,json=feeShare,proto3" json:"fee_share"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a5066ce5bd7311, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() ModuleParams {
	if m != nil {
		return m.Params
	}
	return ModuleParams{}
}

func (m *GenesisState) GetFeeShare() []FeeShare {
	if m != nil {
		return m.FeeShare
	}
	return nil
}

// ModuleParams defines the params for the devgas module
type ModuleParams struct {
	// enable_feeshare defines a parameter to enable the feeshare module
	EnableFeeShare bool `protobuf:"varint,1,opt,name=enable_fee_share,json=enableFeeShare,proto3" json:"enable_fee_share,omitempty"`
	// developer_shares defines the proportion of the transaction fees to be
	// distributed to the registered contract owner
	DeveloperShares cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=developer_shares,json=developerShares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"developer_shares"`
	// allowed_denoms defines the list of denoms that are allowed to be paid to
	// the contract withdraw addresses. If said denom is not in the list, the fees
	// will ONLY be sent to the community pool.
	// If this list is empty, all denoms are allowed.
	AllowedDenoms []string `protobuf:"bytes,3,rep,name=allowed_denoms,json=allowedDenoms,proto3" json:"allowed_denoms,omitempty"`
}

func (m *ModuleParams) Reset()         { *m = ModuleParams{} }
func (m *ModuleParams) String() string { return proto.CompactTextString(m) }
func (*ModuleParams) ProtoMessage()    {}
func (*ModuleParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a5066ce5bd7311, []int{1}
}
func (m *ModuleParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleParams.Merge(m, src)
}
func (m *ModuleParams) XXX_Size() int {
	return m.Size()
}
func (m *ModuleParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleParams.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleParams proto.InternalMessageInfo

func (m *ModuleParams) GetEnableFeeShare() bool {
	if m != nil {
		return m.EnableFeeShare
	}
	return false
}

func (m *ModuleParams) GetAllowedDenoms() []string {
	if m != nil {
		return m.AllowedDenoms
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "nibiru.devgas.v1.GenesisState")
	proto.RegisterType((*ModuleParams)(nil), "nibiru.devgas.v1.ModuleParams")
}

func init() { proto.RegisterFile("nibiru/devgas/v1/genesis.proto", fileDescriptor_86a5066ce5bd7311) }

var fileDescriptor_86a5066ce5bd7311 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0xc1, 0xaa, 0xd3, 0x40,
	0x14, 0xcd, 0xbc, 0xca, 0xe3, 0x75, 0x5e, 0xad, 0x25, 0xb8, 0x88, 0x15, 0xa7, 0xa1, 0x20, 0x64,
	0xe3, 0x0c, 0x8d, 0x5b, 0xdd, 0xd4, 0xa2, 0x9b, 0x2a, 0x92, 0xee, 0x44, 0x08, 0x93, 0xe4, 0x36,
	0x09, 0x26, 0x99, 0x90, 0x49, 0xa3, 0xfd, 0x06, 0x37, 0x7e, 0x8c, 0x5b, 0xf7, 0x5d, 0x16, 0x57,
	0xe2, 0xa2, 0x48, 0xfb, 0x23, 0x92, 0xcc, 0xa8, 0xc5, 0xee, 0xe6, 0x9e, 0x73, 0xcf, 0xb9, 0x77,
	0xee, 0xc1, 0xa4, 0x48, 0x83, 0xb4, 0xda, 0xb0, 0x08, 0x9a, 0x98, 0x4b, 0xd6, 0xcc, 0x58, 0x0c,
	0x05, 0xc8, 0x54, 0xd2, 0xb2, 0x12, 0xb5, 0x30, 0x47, 0x8a, 0xa7, 0x8a, 0xa7, 0xcd, 0x6c, 0xfc,
	0xe8, 0x42, 0xa1, 0xb9, 0x4e, 0x30, 0xbe, 0x1f, 0x8b, 0x58, 0x74, 0x4f, 0xd6, 0xbe, 0x34, 0xfa,
	0x20, 0x14, 0x32, 0x17, 0xd2, 0x57, 0x84, 0x2a, 0x14, 0x35, 0xfd, 0x8c, 0xf0, 0xe0, 0x95, 0x9a,
	0xb9, 0xaa, 0x79, 0x0d, 0xe6, 0x33, 0x7c, 0x5d, 0xf2, 0x8a, 0xe7, 0xd2, 0x42, 0x36, 0x72, 0x6e,
	0x5d, 0x42, 0xff, 0xdf, 0x81, 0xbe, 0x16, 0xd1, 0x26, 0x83, 0xb7, 0x5d, 0xd7, 0xfc, 0xce, 0xee,
	0x30, 0x31, 0x3c, 0xad, 0x31, 0x9f, 0xe3, 0xfe, 0x1a, 0xc0, 0x97, 0x09, 0xaf, 0xc0, 0xba, 0xb2,
	0x7b, 0xce, 0xad, 0x3b, 0xbe, 0x34, 0x78, 0x09, 0xb0, 0x6a, 0x3b, 0xb4, 0xf8, 0x66, 0xad, 0xeb,
	0xe9, 0x37, 0x84, 0x07, 0xe7, 0xee, 0xa6, 0x83, 0x47, 0x50, 0xf0, 0x20, 0x03, 0xff, 0x9f, 0x6d,
	0xbb, 0xd7, 0x8d, 0x37, 0x54, 0xf8, 0x1f, 0x2b, 0xf3, 0x3d, 0x1e, 0x45, 0xd0, 0x40, 0x26, 0x4a,
	0xa8, 0x54, 0xa3, 0xb4, 0xae, 0x6c, 0xe4, 0xf4, 0xe7, 0xb3, 0x76, 0xc8, 0xcf, 0xc3, 0xe4, 0xa1,
	0xfa, 0xb8, 0x8c, 0x3e, 0xd0, 0x54, 0xb0, 0x9c, 0xd7, 0x09, 0x5d, 0x42, 0xcc, 0xc3, 0xed, 0x02,
	0xc2, 0xef, 0x5f, 0x9f, 0x60, 0x7d, 0x97, 0x05, 0x84, 0xde, 0xbd, 0xbf, 0x56, 0x9d, 0xb9, 0x34,
	0x1f, 0xe3, 0x21, 0xcf, 0x32, 0xf1, 0x11, 0x22, 0x3f, 0x82, 0x42, 0xe4, 0xd2, 0xea, 0xd9, 0x3d,
	0xa7, 0xef, 0xdd, 0xd5, 0xe8, 0xa2, 0x03, 0xe7, 0xcb, 0xdd, 0x91, 0xa0, 0xfd, 0x91, 0xa0, 0x5f,
	0x47, 0x82, 0xbe, 0x9c, 0x88, 0xb1, 0x3f, 0x11, 0xe3, 0xc7, 0x89, 0x18, 0xef, 0xdc, 0x38, 0xad,
	0x93, 0x4d, 0x40, 0x43, 0x91, 0xb3, 0x37, 0xdd, 0x3d, 0x5e, 0x24, 0x3c, 0x2d, 0x98, 0x8e, 0xb3,
	0x71, 0xd9, 0xa7, 0xb3, 0x4c, 0xeb, 0x6d, 0x09, 0x32, 0xb8, 0xee, 0x22, 0x7a, 0xfa, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0x38, 0x2d, 0xc3, 0xb8, 0x26, 0x02, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeShare) > 0 {
		for iNdEx := len(m.FeeShare) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeShare[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ModuleParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedDenoms) > 0 {
		for iNdEx := len(m.AllowedDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedDenoms[iNdEx])
			copy(dAtA[i:], m.AllowedDenoms[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.AllowedDenoms[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.DeveloperShares.Size()
		i -= size
		if _, err := m.DeveloperShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.EnableFeeShare {
		i--
		if m.EnableFeeShare {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.FeeShare) > 0 {
		for _, e := range m.FeeShare {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *ModuleParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableFeeShare {
		n += 2
	}
	l = m.DeveloperShares.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.AllowedDenoms) > 0 {
		for _, s := range m.AllowedDenoms {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeShare = append(m.FeeShare, FeeShare{})
			if err := m.FeeShare[len(m.FeeShare)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableFeeShare", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableFeeShare = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DeveloperShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedDenoms = append(m.AllowedDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
