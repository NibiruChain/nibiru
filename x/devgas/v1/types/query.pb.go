// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nibiru/devgas/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryFeeSharesRequest is the request type for the Query/FeeShares RPC method.
type QueryFeeSharesRequest struct {
	// TODO feat(devgas): re-implement the paginated version
	// TODO feat(colletions): add automatic pagination generation
	Deployer string `protobuf:"bytes,1,opt,name=deployer,proto3" json:"deployer,omitempty"`
}

func (m *QueryFeeSharesRequest) Reset()         { *m = QueryFeeSharesRequest{} }
func (m *QueryFeeSharesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeSharesRequest) ProtoMessage()    {}
func (*QueryFeeSharesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b68d3a02185e7c52, []int{0}
}
func (m *QueryFeeSharesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeSharesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeSharesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeSharesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeSharesRequest.Merge(m, src)
}
func (m *QueryFeeSharesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeSharesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeSharesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeSharesRequest proto.InternalMessageInfo

func (m *QueryFeeSharesRequest) GetDeployer() string {
	if m != nil {
		return m.Deployer
	}
	return ""
}

// QueryFeeSharesResponse is the response type for the Query/FeeShares RPC
// method.
type QueryFeeSharesResponse struct {
	// FeeShare is the slice of all stored Reveneue for the deployer
	Feeshare []FeeShare `protobuf:"bytes,1,rep,name=feeshare,proto3" json:"feeshare"`
}

func (m *QueryFeeSharesResponse) Reset()         { *m = QueryFeeSharesResponse{} }
func (m *QueryFeeSharesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeSharesResponse) ProtoMessage()    {}
func (*QueryFeeSharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b68d3a02185e7c52, []int{1}
}
func (m *QueryFeeSharesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeSharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeSharesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeSharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeSharesResponse.Merge(m, src)
}
func (m *QueryFeeSharesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeSharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeSharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeSharesResponse proto.InternalMessageInfo

func (m *QueryFeeSharesResponse) GetFeeshare() []FeeShare {
	if m != nil {
		return m.Feeshare
	}
	return nil
}

// QueryFeeShareRequest is the request type for the Query/FeeShare RPC method.
type QueryFeeShareRequest struct {
	// contract_address of a registered contract in bech32 format
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryFeeShareRequest) Reset()         { *m = QueryFeeShareRequest{} }
func (m *QueryFeeShareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeShareRequest) ProtoMessage()    {}
func (*QueryFeeShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b68d3a02185e7c52, []int{2}
}
func (m *QueryFeeShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeShareRequest.Merge(m, src)
}
func (m *QueryFeeShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeShareRequest proto.InternalMessageInfo

func (m *QueryFeeShareRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// QueryFeeShareResponse is the response type for the Query/FeeShare RPC method.
type QueryFeeShareResponse struct {
	// FeeShare is a stored Reveneue for the queried contract
	Feeshare FeeShare `protobuf:"bytes,1,opt,name=feeshare,proto3" json:"feeshare"`
}

func (m *QueryFeeShareResponse) Reset()         { *m = QueryFeeShareResponse{} }
func (m *QueryFeeShareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeShareResponse) ProtoMessage()    {}
func (*QueryFeeShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b68d3a02185e7c52, []int{3}
}
func (m *QueryFeeShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeShareResponse.Merge(m, src)
}
func (m *QueryFeeShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeShareResponse proto.InternalMessageInfo

func (m *QueryFeeShareResponse) GetFeeshare() FeeShare {
	if m != nil {
		return m.Feeshare
	}
	return FeeShare{}
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b68d3a02185e7c52, []int{4}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params is the returned FeeShare parameter
	Params ModuleParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b68d3a02185e7c52, []int{5}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() ModuleParams {
	if m != nil {
		return m.Params
	}
	return ModuleParams{}
}

// QueryFeeSharesByWithdrawerRequest is the request type for the
// Query/FeeSharesByWithdrawer RPC method.
type QueryFeeSharesByWithdrawerRequest struct {
	// withdrawer_address in bech32 format
	WithdrawerAddress string `protobuf:"bytes,1,opt,name=withdrawer_address,json=withdrawerAddress,proto3" json:"withdrawer_address,omitempty"`
}

func (m *QueryFeeSharesByWithdrawerRequest) Reset()         { *m = QueryFeeSharesByWithdrawerRequest{} }
func (m *QueryFeeSharesByWithdrawerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeSharesByWithdrawerRequest) ProtoMessage()    {}
func (*QueryFeeSharesByWithdrawerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b68d3a02185e7c52, []int{6}
}
func (m *QueryFeeSharesByWithdrawerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeSharesByWithdrawerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeSharesByWithdrawerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeSharesByWithdrawerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeSharesByWithdrawerRequest.Merge(m, src)
}
func (m *QueryFeeSharesByWithdrawerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeSharesByWithdrawerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeSharesByWithdrawerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeSharesByWithdrawerRequest proto.InternalMessageInfo

func (m *QueryFeeSharesByWithdrawerRequest) GetWithdrawerAddress() string {
	if m != nil {
		return m.WithdrawerAddress
	}
	return ""
}

// QueryFeeSharesByWithdrawerResponse is the response type for the
// Query/FeeSharesByWithdrawer RPC method.
type QueryFeeSharesByWithdrawerResponse struct {
	Feeshare []FeeShare `protobuf:"bytes,1,rep,name=feeshare,proto3" json:"feeshare"`
}

func (m *QueryFeeSharesByWithdrawerResponse) Reset()         { *m = QueryFeeSharesByWithdrawerResponse{} }
func (m *QueryFeeSharesByWithdrawerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeSharesByWithdrawerResponse) ProtoMessage()    {}
func (*QueryFeeSharesByWithdrawerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b68d3a02185e7c52, []int{7}
}
func (m *QueryFeeSharesByWithdrawerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeSharesByWithdrawerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeSharesByWithdrawerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeSharesByWithdrawerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeSharesByWithdrawerResponse.Merge(m, src)
}
func (m *QueryFeeSharesByWithdrawerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeSharesByWithdrawerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeSharesByWithdrawerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeSharesByWithdrawerResponse proto.InternalMessageInfo

func (m *QueryFeeSharesByWithdrawerResponse) GetFeeshare() []FeeShare {
	if m != nil {
		return m.Feeshare
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryFeeSharesRequest)(nil), "nibiru.devgas.v1.QueryFeeSharesRequest")
	proto.RegisterType((*QueryFeeSharesResponse)(nil), "nibiru.devgas.v1.QueryFeeSharesResponse")
	proto.RegisterType((*QueryFeeShareRequest)(nil), "nibiru.devgas.v1.QueryFeeShareRequest")
	proto.RegisterType((*QueryFeeShareResponse)(nil), "nibiru.devgas.v1.QueryFeeShareResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "nibiru.devgas.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "nibiru.devgas.v1.QueryParamsResponse")
	proto.RegisterType((*QueryFeeSharesByWithdrawerRequest)(nil), "nibiru.devgas.v1.QueryFeeSharesByWithdrawerRequest")
	proto.RegisterType((*QueryFeeSharesByWithdrawerResponse)(nil), "nibiru.devgas.v1.QueryFeeSharesByWithdrawerResponse")
}

func init() { proto.RegisterFile("nibiru/devgas/v1/query.proto", fileDescriptor_b68d3a02185e7c52) }

var fileDescriptor_b68d3a02185e7c52 = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcf, 0x8e, 0xd2, 0x50,
	0x14, 0xc6, 0xa9, 0x8e, 0x84, 0xb9, 0x2e, 0x1c, 0xaf, 0x8c, 0x21, 0xcd, 0x58, 0xb1, 0x51, 0x61,
	0x4c, 0xec, 0x4d, 0xc1, 0xc4, 0x98, 0xb8, 0x19, 0x4c, 0x5c, 0xa9, 0x51, 0x26, 0x6a, 0xe2, 0x66,
	0x72, 0x4b, 0xcf, 0x94, 0x26, 0xd0, 0xdb, 0xe9, 0x2d, 0x20, 0x31, 0x6c, 0x7c, 0x01, 0x4d, 0xf4,
	0x75, 0xdc, 0xcf, 0x72, 0x12, 0x37, 0xae, 0x8c, 0x01, 0x37, 0xbe, 0x85, 0xe1, 0xfe, 0x41, 0xa1,
	0x0c, 0x64, 0x92, 0xd9, 0x95, 0x73, 0xce, 0x77, 0xbe, 0x1f, 0xa7, 0x1f, 0xa0, 0x9d, 0x28, 0xf4,
	0xc2, 0xa4, 0x47, 0x7c, 0xe8, 0x07, 0x94, 0x93, 0xbe, 0x4b, 0x8e, 0x7a, 0x90, 0x0c, 0x9d, 0x38,
	0x61, 0x29, 0xc3, 0x5b, 0xb2, 0xeb, 0xc8, 0xae, 0xd3, 0x77, 0xcd, 0x7b, 0x2d, 0xc6, 0xbb, 0x8c,
	0x13, 0x8f, 0x72, 0x90, 0xa3, 0xa4, 0xef, 0x7a, 0x90, 0x52, 0x97, 0xc4, 0x34, 0x08, 0x23, 0x9a,
	0x86, 0x2c, 0x92, 0x6a, 0xd3, 0xca, 0xec, 0x0e, 0x20, 0x02, 0x1e, 0x72, 0xd5, 0xbf, 0x91, 0xe9,
	0x2b, 0x1f, 0xd9, 0x2e, 0x06, 0x2c, 0x60, 0xe2, 0x91, 0x4c, 0x9f, 0x54, 0x75, 0x27, 0x60, 0x2c,
	0xe8, 0x00, 0xa1, 0x71, 0x48, 0x68, 0x14, 0xb1, 0x54, 0x38, 0x2a, 0x8d, 0x5d, 0x47, 0xdb, 0xaf,
	0xa6, 0x50, 0x4f, 0x01, 0xf6, 0xdb, 0x34, 0x01, 0xde, 0x84, 0xa3, 0x1e, 0xf0, 0x14, 0x9b, 0xa8,
	0xe0, 0x43, 0xdc, 0x61, 0x43, 0x48, 0x4a, 0x46, 0xd9, 0xa8, 0x6e, 0x36, 0x67, 0x9f, 0xed, 0x37,
	0xe8, 0xfa, 0xa2, 0x88, 0xc7, 0x2c, 0xe2, 0x80, 0x1f, 0xa3, 0xc2, 0x21, 0x00, 0x9f, 0x16, 0x4b,
	0x46, 0xf9, 0x62, 0xf5, 0x72, 0xcd, 0x74, 0x16, 0x4f, 0xe2, 0x68, 0x59, 0x63, 0xe3, 0xf8, 0xe7,
	0xcd, 0x5c, 0x73, 0xa6, 0xb0, 0xf7, 0x50, 0x71, 0x6e, 0xaf, 0x66, 0xd9, 0x45, 0x5b, 0x2d, 0x16,
	0xa5, 0x09, 0x6d, 0xa5, 0x07, 0xd4, 0xf7, 0x13, 0xe0, 0x5c, 0x31, 0x5d, 0xd1, 0xf5, 0x3d, 0x59,
	0xb6, 0x5f, 0x2f, 0x7c, 0x9f, 0x53, 0xc8, 0x8c, 0x33, 0x92, 0x15, 0x11, 0x16, 0x6b, 0x5f, 0xd2,
	0x84, 0x76, 0xf5, 0x8d, 0xec, 0x7d, 0x74, 0x6d, 0xae, 0x3a, 0xb3, 0xca, 0xc7, 0xa2, 0xa2, 0x8c,
	0xac, 0xac, 0xd1, 0x73, 0xe6, 0xf7, 0x3a, 0x20, 0x75, 0xca, 0x4c, 0x69, 0xec, 0x26, 0xba, 0x35,
	0x7f, 0xdc, 0xc6, 0xf0, 0x6d, 0x98, 0xb6, 0xfd, 0x84, 0x0e, 0x20, 0xd1, 0x17, 0xb9, 0x8f, 0xf0,
	0x60, 0x56, 0x5c, 0xb8, 0xc9, 0xd5, 0x7f, 0x1d, 0x7d, 0x15, 0x0f, 0xd9, 0xab, 0x76, 0x9e, 0xc7,
	0xcb, 0xab, 0xfd, 0xd9, 0x40, 0x97, 0x84, 0x09, 0xfe, 0x64, 0xa0, 0xcd, 0x99, 0x13, 0xae, 0x64,
	0x77, 0x2c, 0x4d, 0x9c, 0x59, 0x5d, 0x3f, 0x28, 0x41, 0x6d, 0xf2, 0xf1, 0xfb, 0xef, 0x2f, 0x17,
	0x76, 0x71, 0x85, 0x64, 0x7e, 0x10, 0x87, 0x00, 0x07, 0x82, 0x87, 0x93, 0x0f, 0x3a, 0xaf, 0x23,
	0xfc, 0xd5, 0x40, 0x05, 0xbd, 0x06, 0xdf, 0x5d, 0xe3, 0xa3, 0x79, 0x2a, 0x6b, 0xe7, 0x14, 0xce,
	0x43, 0x81, 0xe3, 0x62, 0xb2, 0x1a, 0x67, 0x31, 0xc2, 0x23, 0x3c, 0x40, 0x79, 0x19, 0x01, 0x7c,
	0xfb, 0x14, 0xaf, 0xb9, 0xbc, 0x99, 0x77, 0xd6, 0x4c, 0x29, 0x9e, 0xb2, 0xe0, 0x31, 0x71, 0x29,
	0xcb, 0x23, 0x33, 0x86, 0xbf, 0x19, 0x68, 0x7b, 0x69, 0x16, 0x70, 0x7d, 0xdd, 0x4b, 0x58, 0x92,
	0x46, 0xf3, 0xc1, 0xd9, 0x44, 0x0a, 0xf3, 0x91, 0xc0, 0xac, 0x63, 0x77, 0xf5, 0xd9, 0xb2, 0x39,
	0x1f, 0x35, 0x9e, 0x1d, 0x8f, 0x2d, 0xe3, 0x64, 0x6c, 0x19, 0xbf, 0xc6, 0x96, 0xf1, 0x79, 0x62,
	0xe5, 0x4e, 0x26, 0x56, 0xee, 0xc7, 0xc4, 0xca, 0xbd, 0xab, 0x05, 0x61, 0xda, 0xee, 0x79, 0x4e,
	0x8b, 0x75, 0xc9, 0x0b, 0xb1, 0xf6, 0x49, 0x9b, 0x86, 0x91, 0xb6, 0xe8, 0xd7, 0xc8, 0xfb, 0xff,
	0x7c, 0xd2, 0x61, 0x0c, 0xdc, 0xcb, 0x8b, 0xbf, 0xc2, 0xfa, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa5, 0xe5, 0x49, 0x1c, 0xdb, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// FeeShares retrieves all FeeShares that a deployer has
	// registered
	FeeShares(ctx context.Context, in *QueryFeeSharesRequest, opts ...grpc.CallOption) (*QueryFeeSharesResponse, error)
	// FeeShare retrieves a registered FeeShare for a given contract address
	FeeShare(ctx context.Context, in *QueryFeeShareRequest, opts ...grpc.CallOption) (*QueryFeeShareResponse, error)
	// Params retrieves the module params
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// FeeSharesByWithdrawer retrieves all FeeShares with a given withdrawer
	// address
	FeeSharesByWithdrawer(ctx context.Context, in *QueryFeeSharesByWithdrawerRequest, opts ...grpc.CallOption) (*QueryFeeSharesByWithdrawerResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) FeeShares(ctx context.Context, in *QueryFeeSharesRequest, opts ...grpc.CallOption) (*QueryFeeSharesResponse, error) {
	out := new(QueryFeeSharesResponse)
	err := c.cc.Invoke(ctx, "/nibiru.devgas.v1.Query/FeeShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeShare(ctx context.Context, in *QueryFeeShareRequest, opts ...grpc.CallOption) (*QueryFeeShareResponse, error) {
	out := new(QueryFeeShareResponse)
	err := c.cc.Invoke(ctx, "/nibiru.devgas.v1.Query/FeeShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/nibiru.devgas.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeSharesByWithdrawer(ctx context.Context, in *QueryFeeSharesByWithdrawerRequest, opts ...grpc.CallOption) (*QueryFeeSharesByWithdrawerResponse, error) {
	out := new(QueryFeeSharesByWithdrawerResponse)
	err := c.cc.Invoke(ctx, "/nibiru.devgas.v1.Query/FeeSharesByWithdrawer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// FeeShares retrieves all FeeShares that a deployer has
	// registered
	FeeShares(context.Context, *QueryFeeSharesRequest) (*QueryFeeSharesResponse, error)
	// FeeShare retrieves a registered FeeShare for a given contract address
	FeeShare(context.Context, *QueryFeeShareRequest) (*QueryFeeShareResponse, error)
	// Params retrieves the module params
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// FeeSharesByWithdrawer retrieves all FeeShares with a given withdrawer
	// address
	FeeSharesByWithdrawer(context.Context, *QueryFeeSharesByWithdrawerRequest) (*QueryFeeSharesByWithdrawerResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) FeeShares(ctx context.Context, req *QueryFeeSharesRequest) (*QueryFeeSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeShares not implemented")
}
func (*UnimplementedQueryServer) FeeShare(ctx context.Context, req *QueryFeeShareRequest) (*QueryFeeShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeShare not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) FeeSharesByWithdrawer(ctx context.Context, req *QueryFeeSharesByWithdrawerRequest) (*QueryFeeSharesByWithdrawerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeSharesByWithdrawer not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_FeeShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.devgas.v1.Query/FeeShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeShares(ctx, req.(*QueryFeeSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.devgas.v1.Query/FeeShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeShare(ctx, req.(*QueryFeeShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.devgas.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeSharesByWithdrawer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeSharesByWithdrawerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeSharesByWithdrawer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.devgas.v1.Query/FeeSharesByWithdrawer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeSharesByWithdrawer(ctx, req.(*QueryFeeSharesByWithdrawerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nibiru.devgas.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FeeShares",
			Handler:    _Query_FeeShares_Handler,
		},
		{
			MethodName: "FeeShare",
			Handler:    _Query_FeeShare_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "FeeSharesByWithdrawer",
			Handler:    _Query_FeeSharesByWithdrawer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nibiru/devgas/v1/query.proto",
}

func (m *QueryFeeSharesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeSharesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeSharesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deployer) > 0 {
		i -= len(m.Deployer)
		copy(dAtA[i:], m.Deployer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Deployer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeSharesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeSharesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeSharesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Feeshare) > 0 {
		for iNdEx := len(m.Feeshare) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Feeshare[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Feeshare.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFeeSharesByWithdrawerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeSharesByWithdrawerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeSharesByWithdrawerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawerAddress) > 0 {
		i -= len(m.WithdrawerAddress)
		copy(dAtA[i:], m.WithdrawerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WithdrawerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeSharesByWithdrawerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeSharesByWithdrawerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeSharesByWithdrawerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Feeshare) > 0 {
		for iNdEx := len(m.Feeshare) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Feeshare[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryFeeSharesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Deployer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeeSharesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Feeshare) > 0 {
		for _, e := range m.Feeshare {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFeeShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeeShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Feeshare.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFeeSharesByWithdrawerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithdrawerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeeSharesByWithdrawerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Feeshare) > 0 {
		for _, e := range m.Feeshare {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryFeeSharesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeSharesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeSharesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeSharesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeSharesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeSharesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feeshare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feeshare = append(m.Feeshare, FeeShare{})
			if err := m.Feeshare[len(m.Feeshare)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feeshare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Feeshare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeSharesByWithdrawerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeSharesByWithdrawerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeSharesByWithdrawerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeSharesByWithdrawerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeSharesByWithdrawerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeSharesByWithdrawerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feeshare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feeshare = append(m.Feeshare, FeeShare{})
			if err := m.Feeshare[len(m.Feeshare)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
