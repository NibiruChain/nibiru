// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nibiru/oracle/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_NibiruChain_nibiru_v2_x_common_asset "github.com/NibiruChain/nibiru/v2/x/common/asset"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgAggregateExchangeRatePrevote represents a message to submit
// aggregate exchange rate prevote.
type MsgAggregateExchangeRatePrevote struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty" yaml:"hash"`
	// Feeder is the Bech32 address of the price feeder. A validator may
	// specify multiple price feeders by delegating them consent. The validator
	// address is also a valid feeder by default.
	Feeder string `protobuf:"bytes,2,opt,name=feeder,proto3" json:"feeder,omitempty" yaml:"feeder"`
	// Validator is the Bech32 address to which the prevote will be credited.
	Validator string `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty" yaml:"validator"`
}

func (m *MsgAggregateExchangeRatePrevote) Reset()         { *m = MsgAggregateExchangeRatePrevote{} }
func (m *MsgAggregateExchangeRatePrevote) String() string { return proto.CompactTextString(m) }
func (*MsgAggregateExchangeRatePrevote) ProtoMessage()    {}
func (*MsgAggregateExchangeRatePrevote) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e362c65eb610f4, []int{0}
}
func (m *MsgAggregateExchangeRatePrevote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAggregateExchangeRatePrevote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAggregateExchangeRatePrevote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAggregateExchangeRatePrevote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAggregateExchangeRatePrevote.Merge(m, src)
}
func (m *MsgAggregateExchangeRatePrevote) XXX_Size() int {
	return m.Size()
}
func (m *MsgAggregateExchangeRatePrevote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAggregateExchangeRatePrevote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAggregateExchangeRatePrevote proto.InternalMessageInfo

// MsgAggregateExchangeRatePrevoteResponse defines the
// Msg/AggregateExchangeRatePrevote response type.
type MsgAggregateExchangeRatePrevoteResponse struct {
}

func (m *MsgAggregateExchangeRatePrevoteResponse) Reset() {
	*m = MsgAggregateExchangeRatePrevoteResponse{}
}
func (m *MsgAggregateExchangeRatePrevoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAggregateExchangeRatePrevoteResponse) ProtoMessage()    {}
func (*MsgAggregateExchangeRatePrevoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e362c65eb610f4, []int{1}
}
func (m *MsgAggregateExchangeRatePrevoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAggregateExchangeRatePrevoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAggregateExchangeRatePrevoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAggregateExchangeRatePrevoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAggregateExchangeRatePrevoteResponse.Merge(m, src)
}
func (m *MsgAggregateExchangeRatePrevoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAggregateExchangeRatePrevoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAggregateExchangeRatePrevoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAggregateExchangeRatePrevoteResponse proto.InternalMessageInfo

// MsgAggregateExchangeRateVote represents a message to submit
// aggregate exchange rate vote.
type MsgAggregateExchangeRateVote struct {
	Salt          string `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty" yaml:"salt"`
	ExchangeRates string `protobuf:"bytes,2,opt,name=exchange_rates,json=exchangeRates,proto3" json:"exchange_rates,omitempty" yaml:"exchange_rates"`
	// Feeder is the Bech32 address of the price feeder. A validator may
	// specify multiple price feeders by delegating them consent. The validator
	// address is also a valid feeder by default.
	Feeder string `protobuf:"bytes,3,opt,name=feeder,proto3" json:"feeder,omitempty" yaml:"feeder"`
	// Validator is the Bech32 address to which the vote will be credited.
	Validator string `protobuf:"bytes,4,opt,name=validator,proto3" json:"validator,omitempty" yaml:"validator"`
}

func (m *MsgAggregateExchangeRateVote) Reset()         { *m = MsgAggregateExchangeRateVote{} }
func (m *MsgAggregateExchangeRateVote) String() string { return proto.CompactTextString(m) }
func (*MsgAggregateExchangeRateVote) ProtoMessage()    {}
func (*MsgAggregateExchangeRateVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e362c65eb610f4, []int{2}
}
func (m *MsgAggregateExchangeRateVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAggregateExchangeRateVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAggregateExchangeRateVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAggregateExchangeRateVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAggregateExchangeRateVote.Merge(m, src)
}
func (m *MsgAggregateExchangeRateVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgAggregateExchangeRateVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAggregateExchangeRateVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAggregateExchangeRateVote proto.InternalMessageInfo

// MsgAggregateExchangeRateVoteResponse defines the
// Msg/AggregateExchangeRateVote response type.
type MsgAggregateExchangeRateVoteResponse struct {
}

func (m *MsgAggregateExchangeRateVoteResponse) Reset()         { *m = MsgAggregateExchangeRateVoteResponse{} }
func (m *MsgAggregateExchangeRateVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAggregateExchangeRateVoteResponse) ProtoMessage()    {}
func (*MsgAggregateExchangeRateVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e362c65eb610f4, []int{3}
}
func (m *MsgAggregateExchangeRateVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAggregateExchangeRateVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAggregateExchangeRateVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAggregateExchangeRateVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAggregateExchangeRateVoteResponse.Merge(m, src)
}
func (m *MsgAggregateExchangeRateVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAggregateExchangeRateVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAggregateExchangeRateVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAggregateExchangeRateVoteResponse proto.InternalMessageInfo

// MsgDelegateFeedConsent represents a message to delegate oracle voting rights
// to another address.
type MsgDelegateFeedConsent struct {
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty" yaml:"operator"`
	Delegate string `protobuf:"bytes,2,opt,name=delegate,proto3" json:"delegate,omitempty" yaml:"delegate"`
}

func (m *MsgDelegateFeedConsent) Reset()         { *m = MsgDelegateFeedConsent{} }
func (m *MsgDelegateFeedConsent) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateFeedConsent) ProtoMessage()    {}
func (*MsgDelegateFeedConsent) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e362c65eb610f4, []int{4}
}
func (m *MsgDelegateFeedConsent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateFeedConsent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateFeedConsent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateFeedConsent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateFeedConsent.Merge(m, src)
}
func (m *MsgDelegateFeedConsent) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateFeedConsent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateFeedConsent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateFeedConsent proto.InternalMessageInfo

// MsgDelegateFeedConsentResponse defines the Msg/DelegateFeedConsent response
// type.
type MsgDelegateFeedConsentResponse struct {
}

func (m *MsgDelegateFeedConsentResponse) Reset()         { *m = MsgDelegateFeedConsentResponse{} }
func (m *MsgDelegateFeedConsentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateFeedConsentResponse) ProtoMessage()    {}
func (*MsgDelegateFeedConsentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e362c65eb610f4, []int{5}
}
func (m *MsgDelegateFeedConsentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateFeedConsentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateFeedConsentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateFeedConsentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateFeedConsentResponse.Merge(m, src)
}
func (m *MsgDelegateFeedConsentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateFeedConsentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateFeedConsentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateFeedConsentResponse proto.InternalMessageInfo

type MsgEditOracleParams struct {
	Sender string           `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Params *OracleParamsMsg `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty" yaml:"params"`
}

func (m *MsgEditOracleParams) Reset()         { *m = MsgEditOracleParams{} }
func (m *MsgEditOracleParams) String() string { return proto.CompactTextString(m) }
func (*MsgEditOracleParams) ProtoMessage()    {}
func (*MsgEditOracleParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e362c65eb610f4, []int{6}
}
func (m *MsgEditOracleParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditOracleParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditOracleParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditOracleParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditOracleParams.Merge(m, src)
}
func (m *MsgEditOracleParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditOracleParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditOracleParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditOracleParams proto.InternalMessageInfo

type MsgEditOracleParamsResponse struct {
}

func (m *MsgEditOracleParamsResponse) Reset()         { *m = MsgEditOracleParamsResponse{} }
func (m *MsgEditOracleParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEditOracleParamsResponse) ProtoMessage()    {}
func (*MsgEditOracleParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e362c65eb610f4, []int{7}
}
func (m *MsgEditOracleParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditOracleParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditOracleParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditOracleParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditOracleParamsResponse.Merge(m, src)
}
func (m *MsgEditOracleParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditOracleParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditOracleParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditOracleParamsResponse proto.InternalMessageInfo

type OracleParamsMsg struct {
	// VotePeriod defines the number of blocks during which voting takes place.
	VotePeriod uint64 `protobuf:"varint,1,opt,name=vote_period,json=votePeriod,proto3" json:"vote_period,omitempty" yaml:"vote_period"`
	// VoteThreshold specifies the minimum proportion of votes that must be
	// received for a ballot to pass.
	VoteThreshold *cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=vote_threshold,json=voteThreshold,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"vote_threshold,omitempty" yaml:"vote_threshold"`
	// RewardBand defines a maxium divergence that a price vote can have from the
	// weighted median in the ballot. If a vote lies within the valid range
	// defined by:
	//	μ := weightedMedian,
	//	validRange := μ ± (μ * rewardBand / 2),
	// then rewards are added to the validator performance.
	// Note that if the reward band is smaller than 1 standard
	// deviation, the band is taken to be 1 standard deviation.a price
	RewardBand *cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=reward_band,json=rewardBand,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"reward_band,omitempty" yaml:"reward_band"`
	// The set of whitelisted markets, or asset pairs, for the module.
	// Ex. '["unibi:uusd","ubtc:uusd"]'
	Whitelist []github_com_NibiruChain_nibiru_v2_x_common_asset.Pair `protobuf:"bytes,4,rep,name=whitelist,proto3,customtype=github.com/NibiruChain/nibiru/v2/x/common/asset.Pair" json:"whitelist,omitempty" yaml:"whitelist"`
	// SlashFraction returns the proportion of an oracle's stake that gets
	// slashed in the event of slashing. `SlashFraction` specifies the exact
	// penalty for failing a voting period.
	SlashFraction *cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=slash_fraction,json=slashFraction,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"slash_fraction,omitempty" yaml:"slash_fraction"`
	// SlashWindow returns the number of voting periods that specify a
	// "slash window". After each slash window, all oracles that have missed more
	// than the penalty threshold are slashed. Missing the penalty threshold is
	// synonymous with submitting fewer valid votes than `MinValidPerWindow`.
	SlashWindow       uint64                       `protobuf:"varint,6,opt,name=slash_window,json=slashWindow,proto3" json:"slash_window,omitempty" yaml:"slash_window"`
	MinValidPerWindow *cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=min_valid_per_window,json=minValidPerWindow,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_valid_per_window,omitempty" yaml:"min_valid_per_window"`
	// Amount of time to look back for TWAP calculations
	TwapLookbackWindow *time.Duration `protobuf:"bytes,8,opt,name=twap_lookback_window,json=twapLookbackWindow,proto3,stdduration" json:"twap_lookback_window,omitempty" yaml:"twap_lookback_window"`
	// The minimum number of voters (i.e. oracle validators) per pair for it to be
	// considered a passing ballot. Recommended at least 4.
	MinVoters uint64 `protobuf:"varint,9,opt,name=min_voters,json=minVoters,proto3" json:"min_voters,omitempty" yaml:"min_voters"`
	// The validator fee ratio that is given to validators every epoch.
	ValidatorFeeRatio *cosmossdk_io_math.LegacyDec `protobuf:"bytes,10,opt,name=validator_fee_ratio,json=validatorFeeRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"validator_fee_ratio,omitempty" yaml:"validator_fee_ratio"`
	ExpirationBlocks  uint64                       `protobuf:"varint,11,opt,name=expiration_blocks,json=expirationBlocks,proto3" json:"expiration_blocks,omitempty" yaml:"expiration_blocks"`
}

func (m *OracleParamsMsg) Reset()         { *m = OracleParamsMsg{} }
func (m *OracleParamsMsg) String() string { return proto.CompactTextString(m) }
func (*OracleParamsMsg) ProtoMessage()    {}
func (*OracleParamsMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e362c65eb610f4, []int{8}
}
func (m *OracleParamsMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleParamsMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleParamsMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleParamsMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleParamsMsg.Merge(m, src)
}
func (m *OracleParamsMsg) XXX_Size() int {
	return m.Size()
}
func (m *OracleParamsMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleParamsMsg.DiscardUnknown(m)
}

var xxx_messageInfo_OracleParamsMsg proto.InternalMessageInfo

func (m *OracleParamsMsg) GetVotePeriod() uint64 {
	if m != nil {
		return m.VotePeriod
	}
	return 0
}

func (m *OracleParamsMsg) GetSlashWindow() uint64 {
	if m != nil {
		return m.SlashWindow
	}
	return 0
}

func (m *OracleParamsMsg) GetTwapLookbackWindow() *time.Duration {
	if m != nil {
		return m.TwapLookbackWindow
	}
	return nil
}

func (m *OracleParamsMsg) GetMinVoters() uint64 {
	if m != nil {
		return m.MinVoters
	}
	return 0
}

func (m *OracleParamsMsg) GetExpirationBlocks() uint64 {
	if m != nil {
		return m.ExpirationBlocks
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgAggregateExchangeRatePrevote)(nil), "nibiru.oracle.v1.MsgAggregateExchangeRatePrevote")
	proto.RegisterType((*MsgAggregateExchangeRatePrevoteResponse)(nil), "nibiru.oracle.v1.MsgAggregateExchangeRatePrevoteResponse")
	proto.RegisterType((*MsgAggregateExchangeRateVote)(nil), "nibiru.oracle.v1.MsgAggregateExchangeRateVote")
	proto.RegisterType((*MsgAggregateExchangeRateVoteResponse)(nil), "nibiru.oracle.v1.MsgAggregateExchangeRateVoteResponse")
	proto.RegisterType((*MsgDelegateFeedConsent)(nil), "nibiru.oracle.v1.MsgDelegateFeedConsent")
	proto.RegisterType((*MsgDelegateFeedConsentResponse)(nil), "nibiru.oracle.v1.MsgDelegateFeedConsentResponse")
	proto.RegisterType((*MsgEditOracleParams)(nil), "nibiru.oracle.v1.MsgEditOracleParams")
	proto.RegisterType((*MsgEditOracleParamsResponse)(nil), "nibiru.oracle.v1.MsgEditOracleParamsResponse")
	proto.RegisterType((*OracleParamsMsg)(nil), "nibiru.oracle.v1.OracleParamsMsg")
}

func init() { proto.RegisterFile("nibiru/oracle/v1/tx.proto", fileDescriptor_11e362c65eb610f4) }

var fileDescriptor_11e362c65eb610f4 = []byte{
	// 1111 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0x8e, 0x9b, 0x10, 0xb2, 0xb3, 0xa4, 0x49, 0xbc, 0x49, 0xf1, 0x6e, 0x12, 0x3b, 0x0c, 0x50,
	0x52, 0x89, 0xda, 0x24, 0x20, 0x44, 0x03, 0x42, 0x74, 0x9b, 0x46, 0xaa, 0x94, 0xc0, 0x6a, 0x84,
	0x8a, 0xd4, 0xcb, 0x6a, 0xd6, 0x9e, 0x78, 0xad, 0xd8, 0x1e, 0xe3, 0x99, 0xfc, 0xba, 0x22, 0x24,
	0x38, 0x22, 0x21, 0xa1, 0x70, 0xcb, 0x1f, 0x80, 0xc4, 0x95, 0x3f, 0xa1, 0xc7, 0x4a, 0x5c, 0x10,
	0x87, 0x05, 0x25, 0x1c, 0x2a, 0x0e, 0x1c, 0xf6, 0x8e, 0x84, 0x3c, 0x33, 0xeb, 0x75, 0x36, 0xdb,
	0x76, 0xc3, 0x6d, 0xdf, 0xfb, 0xbe, 0xf7, 0xde, 0x37, 0x6f, 0x3c, 0xef, 0x2d, 0xa8, 0xc6, 0x41,
	0x2b, 0x48, 0xf7, 0x1d, 0x9a, 0x62, 0x37, 0x24, 0xce, 0xc1, 0x9a, 0xc3, 0x8f, 0xec, 0x24, 0xa5,
	0x9c, 0xea, 0xb3, 0x12, 0xb2, 0x25, 0x64, 0x1f, 0xac, 0xd5, 0xe6, 0x7d, 0xea, 0x53, 0x01, 0x3a,
	0xd9, 0x2f, 0xc9, 0xab, 0x2d, 0xf9, 0x94, 0xfa, 0x21, 0x71, 0x70, 0x12, 0x38, 0x38, 0x8e, 0x29,
	0xc7, 0x3c, 0xa0, 0x31, 0x53, 0xa8, 0xa9, 0x50, 0x61, 0xb5, 0xf6, 0x77, 0x1d, 0x6f, 0x3f, 0x15,
	0x04, 0x85, 0x2f, 0x5f, 0x12, 0xa0, 0xea, 0x49, 0xb8, 0xea, 0x52, 0x16, 0x51, 0xd6, 0x94, 0x55,
	0xa5, 0x21, 0x21, 0xf8, 0xb3, 0x06, 0xac, 0x1d, 0xe6, 0xdf, 0xf5, 0xfd, 0x94, 0xf8, 0x98, 0x93,
	0xfb, 0x47, 0x6e, 0x1b, 0xc7, 0x3e, 0x41, 0x98, 0x93, 0x46, 0x4a, 0x0e, 0x28, 0x27, 0xfa, 0xeb,
	0x60, 0xa2, 0x8d, 0x59, 0xdb, 0xd0, 0x56, 0xb4, 0xd5, 0x52, 0x7d, 0xa6, 0xdb, 0xb1, 0xca, 0xc7,
	0x38, 0x0a, 0x37, 0x60, 0xe6, 0x85, 0x48, 0x80, 0xfa, 0x2d, 0x30, 0xb9, 0x4b, 0x88, 0x47, 0x52,
	0xe3, 0x9a, 0xa0, 0xcd, 0x75, 0x3b, 0xd6, 0xb4, 0xa4, 0x49, 0x3f, 0x44, 0x8a, 0xa0, 0xaf, 0x83,
	0xd2, 0x01, 0x0e, 0x03, 0x0f, 0x73, 0x9a, 0x1a, 0xe3, 0x82, 0x3d, 0xdf, 0xed, 0x58, 0xb3, 0x92,
	0x9d, 0x43, 0x10, 0xf5, 0x69, 0x1b, 0x53, 0xdf, 0x9e, 0x5a, 0x63, 0x4f, 0x4f, 0xad, 0x31, 0x78,
	0x0b, 0xbc, 0xf5, 0x02, 0xc1, 0x88, 0xb0, 0x84, 0xc6, 0x8c, 0xc0, 0x7f, 0x34, 0xb0, 0xf4, 0x2c,
	0xee, 0x43, 0x75, 0x32, 0x86, 0x43, 0x7e, 0xf9, 0x64, 0x99, 0x17, 0x22, 0x01, 0xea, 0x9f, 0x80,
	0xeb, 0x44, 0x05, 0x36, 0x53, 0xcc, 0x09, 0x53, 0x27, 0xac, 0x76, 0x3b, 0xd6, 0x82, 0xa4, 0x5f,
	0xc4, 0x21, 0x9a, 0x26, 0x85, 0x4a, 0xac, 0xd0, 0x9b, 0xf1, 0x2b, 0xf5, 0x66, 0xe2, 0xaa, 0xbd,
	0xb9, 0x09, 0xde, 0x78, 0xde, 0x79, 0xf3, 0xc6, 0x7c, 0xad, 0x81, 0x1b, 0x3b, 0xcc, 0xdf, 0x24,
	0xa1, 0xe0, 0x6d, 0x11, 0xe2, 0xdd, 0xcb, 0x80, 0x98, 0xeb, 0x0e, 0x98, 0xa2, 0x09, 0x49, 0x45,
	0x7d, 0xd9, 0x96, 0x4a, 0xb7, 0x63, 0xcd, 0xc8, 0xfa, 0x3d, 0x04, 0xa2, 0x9c, 0x94, 0x05, 0x78,
	0x2a, 0x8f, 0x6a, 0x4c, 0x21, 0xa0, 0x87, 0x40, 0x94, 0x93, 0x0a, 0x72, 0x57, 0x80, 0x39, 0x5c,
	0x45, 0x2e, 0xf4, 0x44, 0x03, 0x95, 0x1d, 0xe6, 0xdf, 0xf7, 0x02, 0xfe, 0x99, 0xf8, 0xa2, 0x1b,
	0x38, 0xc5, 0x91, 0xe8, 0x28, 0x23, 0x71, 0xd6, 0x51, 0x6d, 0xb0, 0xa3, 0xd2, 0x0f, 0x91, 0x22,
	0xe8, 0xdb, 0x60, 0x32, 0x11, 0x41, 0x42, 0x5d, 0x79, 0xfd, 0x35, 0x7b, 0xf0, 0x49, 0xda, 0xc5,
	0xd4, 0x3b, 0xcc, 0x2f, 0x66, 0x93, 0xa1, 0x10, 0xa9, 0x1c, 0x05, 0xf1, 0xcb, 0x60, 0x71, 0x88,
	0xb2, 0x5c, 0xf9, 0x2f, 0x53, 0x60, 0x66, 0x20, 0xaf, 0xfe, 0x21, 0x28, 0x67, 0xdf, 0x67, 0x33,
	0x21, 0x69, 0x40, 0x3d, 0x21, 0x7d, 0xa2, 0x5e, 0x7b, 0xdc, 0xb1, 0xb4, 0x6e, 0xc7, 0xd2, 0xd5,
	0x15, 0xf7, 0x09, 0x10, 0x81, 0xcc, 0x6a, 0x08, 0x43, 0x77, 0xc1, 0x75, 0x81, 0xf1, 0x76, 0x4a,
	0x58, 0x9b, 0x86, 0x9e, 0xea, 0xf6, 0x47, 0x59, 0xfc, 0xef, 0x1d, 0x6b, 0x51, 0xbe, 0x6b, 0xe6,
	0xed, 0xd9, 0x01, 0x75, 0x22, 0xcc, 0xdb, 0xf6, 0x36, 0xf1, 0xb1, 0x7b, 0xbc, 0x49, 0xdc, 0xfe,
	0x97, 0x7a, 0x31, 0x05, 0x44, 0xd3, 0x99, 0xe3, 0xf3, 0x9e, 0xad, 0x3f, 0x02, 0xe5, 0x94, 0x1c,
	0xe2, 0xd4, 0x6b, 0xb6, 0x70, 0xec, 0xa9, 0xcf, 0xf5, 0xce, 0x68, 0x15, 0xd4, 0x01, 0x0a, 0xf1,
	0x10, 0x01, 0x69, 0xd5, 0x71, 0xec, 0xe9, 0x31, 0x28, 0x1d, 0xb6, 0x03, 0x4e, 0xc2, 0x80, 0x71,
	0x63, 0x62, 0x65, 0x7c, 0xb5, 0x54, 0x6f, 0xa8, 0xcc, 0xef, 0xf9, 0x01, 0x6f, 0xef, 0xb7, 0x6c,
	0x97, 0x46, 0xce, 0xa7, 0xe2, 0x76, 0xee, 0xb5, 0x71, 0x10, 0x3b, 0x6a, 0xac, 0x1d, 0xac, 0x3b,
	0x47, 0x8e, 0x4b, 0xa3, 0x88, 0xc6, 0x0e, 0x66, 0x8c, 0x70, 0xbb, 0x81, 0x83, 0xb4, 0xff, 0x2c,
	0xf2, 0xb4, 0x10, 0xf5, 0x4b, 0x64, 0x0d, 0x63, 0x21, 0x66, 0xed, 0xe6, 0x6e, 0x8a, 0xdd, 0x6c,
	0x58, 0x1a, 0x2f, 0xfd, 0x8f, 0x86, 0x5d, 0x4c, 0x01, 0xd1, 0xb4, 0x70, 0x6c, 0x29, 0x5b, 0xff,
	0x18, 0xbc, 0x22, 0x19, 0x87, 0x41, 0xec, 0xd1, 0x43, 0x63, 0x52, 0xdc, 0xe9, 0xa2, 0xba, 0xd3,
	0x4a, 0x31, 0x87, 0x64, 0x40, 0x54, 0x16, 0xe6, 0x17, 0xc2, 0xd2, 0x19, 0x98, 0x8f, 0x82, 0xb8,
	0x29, 0x1e, 0x73, 0x76, 0xed, 0xbd, 0x3c, 0x2f, 0x0b, 0xa9, 0xf5, 0xd1, 0xa4, 0x2e, 0xca, 0x32,
	0xc3, 0x12, 0x41, 0x34, 0x17, 0x05, 0xf1, 0xc3, 0xcc, 0xdb, 0x20, 0xa9, 0x2a, 0xfa, 0x83, 0x06,
	0xe6, 0xf9, 0x21, 0x4e, 0x9a, 0x21, 0xa5, 0x7b, 0x2d, 0xec, 0xee, 0xf5, 0xaa, 0x4e, 0x89, 0x17,
	0x52, 0xb5, 0xe5, 0xba, 0xb1, 0x7b, 0xeb, 0xc6, 0xde, 0x54, 0xeb, 0xa6, 0xfe, 0x20, 0x13, 0xf4,
	0x77, 0xc7, 0x32, 0x87, 0x85, 0xbf, 0x4d, 0xa3, 0x80, 0x93, 0x28, 0xe1, 0xc7, 0x7d, 0x4d, 0xc3,
	0x78, 0xf0, 0xe4, 0x0f, 0x4b, 0x43, 0x7a, 0x06, 0x6d, 0x2b, 0x44, 0x09, 0xfb, 0x00, 0x00, 0x71,
	0x08, 0xca, 0x49, 0xca, 0x8c, 0x92, 0xe8, 0x65, 0x55, 0xf5, 0x72, 0xae, 0x70, 0x48, 0x81, 0x43,
	0x54, 0xca, 0x8e, 0x26, 0x7e, 0xeb, 0x5f, 0x82, 0x4a, 0x3e, 0x10, 0x9b, 0xbb, 0x44, 0x4c, 0xe2,
	0x80, 0x1a, 0x40, 0xb4, 0xf1, 0xee, 0x68, 0x6d, 0xac, 0x0d, 0x0c, 0xd9, 0x7e, 0x1e, 0x88, 0xe6,
	0x72, 0xef, 0x16, 0xc9, 0xe6, 0x69, 0x40, 0xf5, 0x1d, 0x30, 0x47, 0x8e, 0x92, 0x40, 0x76, 0xa6,
	0xd9, 0x0a, 0xa9, 0xbb, 0xc7, 0x8c, 0xb2, 0xd0, 0xbc, 0xa2, 0x34, 0x1b, 0xbd, 0xf5, 0x30, 0x40,
	0x83, 0x68, 0xb6, 0xef, 0xab, 0x0b, 0xd7, 0xc6, 0xd4, 0xc9, 0xa9, 0xa5, 0x3d, 0x3d, 0xb5, 0xb4,
	0xf5, 0x7f, 0x27, 0xc0, 0x78, 0x36, 0x2e, 0x7e, 0xd2, 0xc0, 0xd2, 0x73, 0x17, 0xf3, 0xda, 0xe5,
	0x51, 0xf6, 0x82, 0xd5, 0x58, 0xbb, 0x73, 0xe5, 0x90, 0x7c, 0xa2, 0x99, 0x5f, 0xfd, 0xfa, 0xd7,
	0xf7, 0xd7, 0x0c, 0x78, 0xc3, 0xb9, 0xf8, 0x6f, 0x23, 0x51, 0x6a, 0x4e, 0x35, 0x50, 0x7d, 0xf6,
	0xaa, 0xb5, 0x47, 0x2f, 0x9c, 0xf1, 0x6b, 0xef, 0x5f, 0x8d, 0x9f, 0xab, 0x5c, 0x14, 0x2a, 0x17,
	0x60, 0x65, 0x40, 0xa5, 0x90, 0xf8, 0xa3, 0x06, 0x2a, 0xc3, 0x96, 0xde, 0xea, 0xd0, 0x62, 0x43,
	0x98, 0xb5, 0x77, 0x46, 0x65, 0xe6, 0x82, 0x6e, 0x0a, 0x41, 0x2b, 0xd0, 0x1c, 0x10, 0x24, 0x17,
	0xfe, 0xed, 0xde, 0x5a, 0xd4, 0xbf, 0xd1, 0xc0, 0xec, 0xa5, 0x3d, 0xf7, 0xe6, 0xd0, 0x72, 0x83,
	0xb4, 0xda, 0xed, 0x91, 0x68, 0xb9, 0xa4, 0x65, 0x21, 0xe9, 0x55, 0xb8, 0x30, 0x78, 0x93, 0x82,
	0x56, 0x7f, 0xf0, 0xf8, 0xcc, 0xd4, 0x9e, 0x9c, 0x99, 0xda, 0x9f, 0x67, 0xa6, 0xf6, 0xdd, 0xb9,
	0x39, 0xf6, 0xe4, 0xdc, 0x1c, 0xfb, 0xed, 0xdc, 0x1c, 0x7b, 0xe4, 0x8c, 0x30, 0xa7, 0x55, 0x2e,
	0x7e, 0x9c, 0x10, 0xd6, 0x9a, 0x14, 0x23, 0xe4, 0xdd, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb7,
	0x06, 0x23, 0xf2, 0x22, 0x0b, 0x00, 0x00,
}

func (this *OracleParamsMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OracleParamsMsg)
	if !ok {
		that2, ok := that.(OracleParamsMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VotePeriod != that1.VotePeriod {
		return false
	}
	if that1.VoteThreshold == nil {
		if this.VoteThreshold != nil {
			return false
		}
	} else if !this.VoteThreshold.Equal(*that1.VoteThreshold) {
		return false
	}
	if that1.RewardBand == nil {
		if this.RewardBand != nil {
			return false
		}
	} else if !this.RewardBand.Equal(*that1.RewardBand) {
		return false
	}
	if len(this.Whitelist) != len(that1.Whitelist) {
		return false
	}
	for i := range this.Whitelist {
		if !this.Whitelist[i].Equal(that1.Whitelist[i]) {
			return false
		}
	}
	if that1.SlashFraction == nil {
		if this.SlashFraction != nil {
			return false
		}
	} else if !this.SlashFraction.Equal(*that1.SlashFraction) {
		return false
	}
	if this.SlashWindow != that1.SlashWindow {
		return false
	}
	if that1.MinValidPerWindow == nil {
		if this.MinValidPerWindow != nil {
			return false
		}
	} else if !this.MinValidPerWindow.Equal(*that1.MinValidPerWindow) {
		return false
	}
	if this.TwapLookbackWindow != nil && that1.TwapLookbackWindow != nil {
		if *this.TwapLookbackWindow != *that1.TwapLookbackWindow {
			return false
		}
	} else if this.TwapLookbackWindow != nil {
		return false
	} else if that1.TwapLookbackWindow != nil {
		return false
	}
	if this.MinVoters != that1.MinVoters {
		return false
	}
	if that1.ValidatorFeeRatio == nil {
		if this.ValidatorFeeRatio != nil {
			return false
		}
	} else if !this.ValidatorFeeRatio.Equal(*that1.ValidatorFeeRatio) {
		return false
	}
	if this.ExpirationBlocks != that1.ExpirationBlocks {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// AggregateExchangeRatePrevote defines a method for submitting
	// aggregate exchange rate prevote
	AggregateExchangeRatePrevote(ctx context.Context, in *MsgAggregateExchangeRatePrevote, opts ...grpc.CallOption) (*MsgAggregateExchangeRatePrevoteResponse, error)
	// AggregateExchangeRateVote defines a method for submitting
	// aggregate exchange rate vote
	AggregateExchangeRateVote(ctx context.Context, in *MsgAggregateExchangeRateVote, opts ...grpc.CallOption) (*MsgAggregateExchangeRateVoteResponse, error)
	// DelegateFeedConsent defines a method for delegating oracle voting rights
	// to another address known as a price feeder.
	// See https://github.com/NibiruChain/pricefeeder.
	DelegateFeedConsent(ctx context.Context, in *MsgDelegateFeedConsent, opts ...grpc.CallOption) (*MsgDelegateFeedConsentResponse, error)
	EditOracleParams(ctx context.Context, in *MsgEditOracleParams, opts ...grpc.CallOption) (*MsgEditOracleParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AggregateExchangeRatePrevote(ctx context.Context, in *MsgAggregateExchangeRatePrevote, opts ...grpc.CallOption) (*MsgAggregateExchangeRatePrevoteResponse, error) {
	out := new(MsgAggregateExchangeRatePrevoteResponse)
	err := c.cc.Invoke(ctx, "/nibiru.oracle.v1.Msg/AggregateExchangeRatePrevote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AggregateExchangeRateVote(ctx context.Context, in *MsgAggregateExchangeRateVote, opts ...grpc.CallOption) (*MsgAggregateExchangeRateVoteResponse, error) {
	out := new(MsgAggregateExchangeRateVoteResponse)
	err := c.cc.Invoke(ctx, "/nibiru.oracle.v1.Msg/AggregateExchangeRateVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DelegateFeedConsent(ctx context.Context, in *MsgDelegateFeedConsent, opts ...grpc.CallOption) (*MsgDelegateFeedConsentResponse, error) {
	out := new(MsgDelegateFeedConsentResponse)
	err := c.cc.Invoke(ctx, "/nibiru.oracle.v1.Msg/DelegateFeedConsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditOracleParams(ctx context.Context, in *MsgEditOracleParams, opts ...grpc.CallOption) (*MsgEditOracleParamsResponse, error) {
	out := new(MsgEditOracleParamsResponse)
	err := c.cc.Invoke(ctx, "/nibiru.oracle.v1.Msg/EditOracleParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// AggregateExchangeRatePrevote defines a method for submitting
	// aggregate exchange rate prevote
	AggregateExchangeRatePrevote(context.Context, *MsgAggregateExchangeRatePrevote) (*MsgAggregateExchangeRatePrevoteResponse, error)
	// AggregateExchangeRateVote defines a method for submitting
	// aggregate exchange rate vote
	AggregateExchangeRateVote(context.Context, *MsgAggregateExchangeRateVote) (*MsgAggregateExchangeRateVoteResponse, error)
	// DelegateFeedConsent defines a method for delegating oracle voting rights
	// to another address known as a price feeder.
	// See https://github.com/NibiruChain/pricefeeder.
	DelegateFeedConsent(context.Context, *MsgDelegateFeedConsent) (*MsgDelegateFeedConsentResponse, error)
	EditOracleParams(context.Context, *MsgEditOracleParams) (*MsgEditOracleParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AggregateExchangeRatePrevote(ctx context.Context, req *MsgAggregateExchangeRatePrevote) (*MsgAggregateExchangeRatePrevoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateExchangeRatePrevote not implemented")
}
func (*UnimplementedMsgServer) AggregateExchangeRateVote(ctx context.Context, req *MsgAggregateExchangeRateVote) (*MsgAggregateExchangeRateVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateExchangeRateVote not implemented")
}
func (*UnimplementedMsgServer) DelegateFeedConsent(ctx context.Context, req *MsgDelegateFeedConsent) (*MsgDelegateFeedConsentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegateFeedConsent not implemented")
}
func (*UnimplementedMsgServer) EditOracleParams(ctx context.Context, req *MsgEditOracleParams) (*MsgEditOracleParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditOracleParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AggregateExchangeRatePrevote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAggregateExchangeRatePrevote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AggregateExchangeRatePrevote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.oracle.v1.Msg/AggregateExchangeRatePrevote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AggregateExchangeRatePrevote(ctx, req.(*MsgAggregateExchangeRatePrevote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AggregateExchangeRateVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAggregateExchangeRateVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AggregateExchangeRateVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.oracle.v1.Msg/AggregateExchangeRateVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AggregateExchangeRateVote(ctx, req.(*MsgAggregateExchangeRateVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DelegateFeedConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegateFeedConsent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DelegateFeedConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.oracle.v1.Msg/DelegateFeedConsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DelegateFeedConsent(ctx, req.(*MsgDelegateFeedConsent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditOracleParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditOracleParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditOracleParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.oracle.v1.Msg/EditOracleParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditOracleParams(ctx, req.(*MsgEditOracleParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nibiru.oracle.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AggregateExchangeRatePrevote",
			Handler:    _Msg_AggregateExchangeRatePrevote_Handler,
		},
		{
			MethodName: "AggregateExchangeRateVote",
			Handler:    _Msg_AggregateExchangeRateVote_Handler,
		},
		{
			MethodName: "DelegateFeedConsent",
			Handler:    _Msg_DelegateFeedConsent_Handler,
		},
		{
			MethodName: "EditOracleParams",
			Handler:    _Msg_EditOracleParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nibiru/oracle/v1/tx.proto",
}

func (m *MsgAggregateExchangeRatePrevote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAggregateExchangeRatePrevote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAggregateExchangeRatePrevote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Feeder) > 0 {
		i -= len(m.Feeder)
		copy(dAtA[i:], m.Feeder)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Feeder)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAggregateExchangeRatePrevoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAggregateExchangeRatePrevoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAggregateExchangeRatePrevoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAggregateExchangeRateVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAggregateExchangeRateVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAggregateExchangeRateVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Feeder) > 0 {
		i -= len(m.Feeder)
		copy(dAtA[i:], m.Feeder)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Feeder)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExchangeRates) > 0 {
		i -= len(m.ExchangeRates)
		copy(dAtA[i:], m.ExchangeRates)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExchangeRates)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Salt) > 0 {
		i -= len(m.Salt)
		copy(dAtA[i:], m.Salt)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Salt)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAggregateExchangeRateVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAggregateExchangeRateVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAggregateExchangeRateVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDelegateFeedConsent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateFeedConsent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateFeedConsent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegate) > 0 {
		i -= len(m.Delegate)
		copy(dAtA[i:], m.Delegate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Delegate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDelegateFeedConsentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateFeedConsentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateFeedConsentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEditOracleParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditOracleParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditOracleParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditOracleParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditOracleParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditOracleParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OracleParamsMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleParamsMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleParamsMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationBlocks != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExpirationBlocks))
		i--
		dAtA[i] = 0x58
	}
	if m.ValidatorFeeRatio != nil {
		{
			size := m.ValidatorFeeRatio.Size()
			i -= size
			if _, err := m.ValidatorFeeRatio.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.MinVoters != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinVoters))
		i--
		dAtA[i] = 0x48
	}
	if m.TwapLookbackWindow != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.TwapLookbackWindow, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.TwapLookbackWindow):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintTx(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x42
	}
	if m.MinValidPerWindow != nil {
		{
			size := m.MinValidPerWindow.Size()
			i -= size
			if _, err := m.MinValidPerWindow.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.SlashWindow != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SlashWindow))
		i--
		dAtA[i] = 0x30
	}
	if m.SlashFraction != nil {
		{
			size := m.SlashFraction.Size()
			i -= size
			if _, err := m.SlashFraction.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Whitelist) > 0 {
		for iNdEx := len(m.Whitelist) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Whitelist[iNdEx].Size()
				i -= size
				if _, err := m.Whitelist[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.RewardBand != nil {
		{
			size := m.RewardBand.Size()
			i -= size
			if _, err := m.RewardBand.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.VoteThreshold != nil {
		{
			size := m.VoteThreshold.Size()
			i -= size
			if _, err := m.VoteThreshold.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.VotePeriod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VotePeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAggregateExchangeRatePrevote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Feeder)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAggregateExchangeRatePrevoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAggregateExchangeRateVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExchangeRates)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Feeder)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAggregateExchangeRateVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDelegateFeedConsent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Delegate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDelegateFeedConsentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEditOracleParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEditOracleParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OracleParamsMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VotePeriod != 0 {
		n += 1 + sovTx(uint64(m.VotePeriod))
	}
	if m.VoteThreshold != nil {
		l = m.VoteThreshold.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RewardBand != nil {
		l = m.RewardBand.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Whitelist) > 0 {
		for _, e := range m.Whitelist {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.SlashFraction != nil {
		l = m.SlashFraction.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SlashWindow != 0 {
		n += 1 + sovTx(uint64(m.SlashWindow))
	}
	if m.MinValidPerWindow != nil {
		l = m.MinValidPerWindow.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TwapLookbackWindow != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.TwapLookbackWindow)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MinVoters != 0 {
		n += 1 + sovTx(uint64(m.MinVoters))
	}
	if m.ValidatorFeeRatio != nil {
		l = m.ValidatorFeeRatio.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExpirationBlocks != 0 {
		n += 1 + sovTx(uint64(m.ExpirationBlocks))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAggregateExchangeRatePrevote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAggregateExchangeRatePrevote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAggregateExchangeRatePrevote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feeder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feeder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAggregateExchangeRatePrevoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAggregateExchangeRatePrevoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAggregateExchangeRatePrevoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAggregateExchangeRateVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAggregateExchangeRateVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAggregateExchangeRateVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRates = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feeder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feeder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAggregateExchangeRateVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAggregateExchangeRateVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAggregateExchangeRateVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateFeedConsent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateFeedConsent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateFeedConsent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateFeedConsentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateFeedConsentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateFeedConsentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditOracleParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditOracleParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditOracleParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &OracleParamsMsg{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditOracleParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditOracleParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditOracleParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleParamsMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleParamsMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleParamsMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriod", wireType)
			}
			m.VotePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.VoteThreshold = &v
			if err := m.VoteThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardBand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.RewardBand = &v
			if err := m.RewardBand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_NibiruChain_nibiru_v2_x_common_asset.Pair
			m.Whitelist = append(m.Whitelist, v)
			if err := m.Whitelist[len(m.Whitelist)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.SlashFraction = &v
			if err := m.SlashFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashWindow", wireType)
			}
			m.SlashWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValidPerWindow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.MinValidPerWindow = &v
			if err := m.MinValidPerWindow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwapLookbackWindow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TwapLookbackWindow == nil {
				m.TwapLookbackWindow = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.TwapLookbackWindow, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVoters", wireType)
			}
			m.MinVoters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinVoters |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorFeeRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.ValidatorFeeRatio = &v
			if err := m.ValidatorFeeRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationBlocks", wireType)
			}
			m.ExpirationBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
