// Copyright (c) 2023-2024 Nibi, Inc.
syntax = "proto3";
package eth.evm.v1;

import "gogoproto/gogo.proto";

option go_package = "github.com/NibiruChain/nibiru/x/evm";

// Params defines the EVM module parameters
message Params {
  option (gogoproto.equal) = true;
  // evm_denom represents the token denomination used to run the EVM state
  // transitions.
  string evm_denom = 1 [(gogoproto.moretags) = "yaml:\"evm_denom\""];
  // enable_create toggles state transitions that use the vm.Create function
  bool enable_create = 2 [(gogoproto.moretags) = "yaml:\"enable_create\""];
  // enable_call toggles state transitions that use the vm.Call function
  bool enable_call = 3 [(gogoproto.moretags) = "yaml:\"enable_call\""];
  // extra_eips defines the additional EIPs for the vm.Config
  repeated int64 extra_eips = 4 [(gogoproto.customname) = "ExtraEIPs", (gogoproto.moretags) = "yaml:\"extra_eips\""];
  // DEPRECATED: chain_config
  reserved 5;
  // allow_unprotected_txs defines if replay-protected (i.e non EIP155
  // signed) transactions can be executed on the state machine.
  bool allow_unprotected_txs = 6;
  // active_precompiles defines the slice of hex addresses of the precompiled
  // contracts that are active
  repeated string active_precompiles = 7;
  // evm_channels is the list of channel identifiers from EVM compatible chains
  repeated string evm_channels = 8 [(gogoproto.customname) = "EVMChannels"];
}

// State represents a single Storage key value pair item.
message State {
  // key is the stored key
  string key = 1;
  // value is the stored value for the given key
  string value = 2;
}

// TransactionLogs define the logs generated from a transaction execution
// with a given hash. It it used for import/export data as transactions are not
// persisted on blockchain state after an upgrade.
message TransactionLogs {
  // hash of the transaction
  string hash = 1;
  // logs is an array of Logs for the given transaction hash
  repeated Log logs = 2;
}

// Log represents an protobuf compatible Ethereum Log that defines a contract
// log event. These events are generated by the LOG opcode and stored/indexed by
// the node.
//
// NOTE: address, topics and data are consensus fields. The rest of the fields
// are derived, i.e. filled in by the nodes, but not secured by consensus.
message Log {
  // address of the contract that generated the event
  string address = 1;
  // topics is a list of topics provided by the contract.
  repeated string topics = 2;
  // data which is supplied by the contract, usually ABI-encoded
  bytes data = 3;

  // block_number of the block in which the transaction was included
  uint64 block_number = 4 [(gogoproto.jsontag) = "blockNumber"];
  // tx_hash is the transaction hash
  string tx_hash = 5 [(gogoproto.jsontag) = "transactionHash"];
  // tx_index of the transaction in the block
  uint64 tx_index = 6 [(gogoproto.jsontag) = "transactionIndex"];
  // block_hash of the block in which the transaction was included
  string block_hash = 7 [(gogoproto.jsontag) = "blockHash"];
  // index of the log in the block
  uint64 index = 8 [(gogoproto.jsontag) = "logIndex"];

  // removed is true if this log was reverted due to a chain
  // reorganisation. You must pay attention to this field if you receive logs
  // through a filter query.
  bool removed = 9;
}

// TxResult stores results of Tx execution.
message TxResult {
  option (gogoproto.goproto_getters) = false;

  // contract_address contains the ethereum address of the created contract (if
  // any). If the state transition is an evm.Call, the contract address will be
  // empty.
  string contract_address = 1 [(gogoproto.moretags) = "yaml:\"contract_address\""];
  // bloom represents the bloom filter bytes
  bytes bloom = 2;
  // tx_logs contains the transaction hash and the proto-compatible ethereum
  // logs.
  TransactionLogs tx_logs = 3 [(gogoproto.moretags) = "yaml:\"tx_logs\"", (gogoproto.nullable) = false];
  // ret defines the bytes from the execution.
  bytes ret = 4;
  // reverted flag is set to true when the call has been reverted
  bool reverted = 5;
  // gas_used notes the amount of gas consumed while execution
  uint64 gas_used = 6;
}

// AccessTuple is the element type of an access list.
message AccessTuple {
  option (gogoproto.goproto_getters) = false;

  // address is a hex formatted ethereum address
  string address = 1;
  // storage_keys are hex formatted hashes of the storage keys
  repeated string storage_keys = 2 [(gogoproto.jsontag) = "storageKeys"];
}

// TraceConfig holds extra parameters to trace functions.
message TraceConfig {
  // DEPRECATED: DisableMemory and DisableReturnData have been renamed to
  // Enable*.
  reserved 4, 7;
  reserved "disable_memory", "disable_return_data";

  // tracer is a custom javascript tracer
  string tracer = 1;
  // timeout overrides the default timeout of 5 seconds for JavaScript-based tracing
  // calls
  string timeout = 2;
  // reexec defines the number of blocks the tracer is willing to go back
  uint64 reexec = 3;
  // disable_stack switches stack capture
  bool disable_stack = 5 [(gogoproto.jsontag) = "disableStack"];
  // disable_storage switches storage capture
  bool disable_storage = 6 [(gogoproto.jsontag) = "disableStorage"];
  // debug can be used to print output during capture end
  bool debug = 8;
  // limit defines the maximum length of output, but zero means unlimited
  int32 limit = 9;
  // DEPRECATED: chain_config
  reserved 10;
  // enable_memory switches memory capture
  bool enable_memory = 11 [(gogoproto.jsontag) = "enableMemory"];
  // enable_return_data switches the capture of return data
  bool enable_return_data = 12 [(gogoproto.jsontag) = "enableReturnData"];
  // tracer_json_config configures the tracer using a JSON string
  string tracer_json_config = 13 [(gogoproto.jsontag) = "tracerConfig"];
}
