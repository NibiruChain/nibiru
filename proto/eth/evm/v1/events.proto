// Copyright (c) 2023-2024 Nibi, Inc.
syntax = "proto3";
package eth.evm.v1;

import "cosmos/base/v1beta1/coin.proto";
import "eth/evm/v1/evm.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/NibiruChain/nibiru/v2/x/evm";

// EventEthereumTx defines the event for an Ethereum transaction
message EventEthereumTx {
  // amount
  string amount = 1;
  // eth_hash is the Ethereum hash of the transaction
  string eth_hash = 2;
  // index of the transaction in the block
  string index = 3;
  // gas_used is the amount of gas used by the transaction
  string gas_used = 4;
  // hash is the Tendermint hash of the transaction
  string hash = 5;
  // recipient of the transaction
  string recipient = 6;
  // vm_error contains a VM error should it occur
  string vm_error = 7;
}

// EventTxLog defines the event for an Ethereum transaction log
message EventTxLog {
  // tx_logs is an array of transaction logs
  repeated Log logs = 1 [(gogoproto.nullable) = false];
}

// EventBlockBloom contains the bloom filter for an Ethereum block.
// The bloom filter encodes logs for efficient event filtering.
message EventBlockBloom {
  // bloom is the bloom filter of the block
  string bloom = 1;
}

// EventFunTokenCreated defines a fun token creation event.
message EventFunTokenCreated {
  string bank_denom = 1;
  string erc20_contract_address = 2;
  string creator = 3;
  bool is_made_from_coin = 4;
}

// EventConvertCoinToEvm is an event emitted when converting Bank Coins into
// ERC20 tokens with the "eth.evm.v1.MsgConvertCoinToEvm" transaction message.
message EventConvertCoinToEvm {
  string sender = 1;
  string erc20_contract_address = 2;
  string to_eth_addr = 3;
  cosmos.base.v1beta1.Coin bank_coin = 4 [
    (gogoproto.moretags) = "yaml:\"bank_coin\"",
    (gogoproto.nullable) = false
  ];
  repeated eth.evm.v1.LogLite evm_logs = 5 [(gogoproto.nullable) = false];
}

// EventTransfer defines event for EVM transfer
message EventTransfer {
  string sender = 1;
  string recipient = 2;
  string amount = 3;
}

// EventContractDeployed defines event for EVM contract deployment
message EventContractDeployed {
  string sender = 1;
  string contract_addr = 2;
}

// EventContractExecuted defines event for EVM contract execution
message EventContractExecuted {
  string sender = 1;
  string contract_addr = 2;
}

// EventConvertEvmToCoin is an event emitted when converting ERC20 tokens to Bank
// Coins with the "eth.evm.v1.MsgConvertEvmToCoin" transaction message.
message EventConvertEvmToCoin {
  string sender = 1;
  string erc20_contract_address = 2;
  string to_address = 3;
  cosmos.base.v1beta1.Coin bank_coin = 4 [
    (gogoproto.moretags) = "yaml:\"bank_coin\"",
    (gogoproto.nullable) = false
  ];
  string sender_eth_addr = 6;
  repeated eth.evm.v1.LogLite evm_logs = 7 [(gogoproto.nullable) = false];
}

// EventWeiBlockDelta is an event emitted when there is a non-zero value for
// block delta (change) in wei in the EVM end block handler.
message EventWeiBlockDelta {
  // net_wei_block_delta is the new sum of all "wei_block_delta" changes up to
  // this point. It is the value for "NetWeiBlockDelta" in the EVM state.
  string net_wei_block_delta = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // WeiBlockDelta is the net sum of all calls of "AddWei" and "SubWei" in the
  // current block. There is no guarantee in the functional sense that the EVM
  // State DB will add the same amount it subtracts. It is possible for the total
  // amount of wei (NIBI) across all accounts to diverge from the initial supply.
  // "WeiBlockDelta" is a mechanism for recording that if it happens.
  string wei_block_delta = 2 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // block_number for which this event is emitted during EVM EndBlock
  uint64 block_number = 3;
}
