syntax = "proto3";
package nibiru.oracle.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "nibiru/oracle/v1/oracle.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/NibiruChain/nibiru/v2/x/oracle/types";

// Query defines the gRPC querier service.
service Query {
  // ExchangeRate returns exchange rate of a pair
  rpc ExchangeRate(QueryExchangeRateRequest)
      returns (QueryExchangeRateResponse) {
    option (google.api.http).get = "/nibiru/oracle/v1beta1/exchange_rate";
  }

  // ExchangeRateTwap returns twap exchange rate of a pair
  rpc ExchangeRateTwap(QueryExchangeRateRequest)
      returns (QueryExchangeRateResponse) {
    option (google.api.http).get = "/nibiru/oracle/v1beta1/exchange_rate_twap";
  }

  // ExchangeRates returns exchange rates of all pairs
  rpc ExchangeRates(QueryExchangeRatesRequest)
      returns (QueryExchangeRatesResponse) {
    option (google.api.http).get =
        "/nibiru/oracle/v1beta1/pairs/exchange_rates";
  }

  // Actives returns all active pairs
  rpc Actives(QueryActivesRequest) returns (QueryActivesResponse) {
    option (google.api.http).get = "/nibiru/oracle/v1beta1/pairs/actives";
  }

  // VoteTargets returns all vote target for pairs
  rpc VoteTargets(QueryVoteTargetsRequest) returns (QueryVoteTargetsResponse) {
    option (google.api.http).get = "/nibiru/oracle/v1beta1/pairs/vote_targets";
  }

  // FeederDelegation returns feeder delegation of a validator
  rpc FeederDelegation(QueryFeederDelegationRequest)
      returns (QueryFeederDelegationResponse) {
    option (google.api.http).get =
        "/nibiru/oracle/v1beta1/validators/{validator_addr}/feeder";
  }

  // MissCounter returns oracle miss counter of a validator
  rpc MissCounter(QueryMissCounterRequest) returns (QueryMissCounterResponse) {
    option (google.api.http).get =
        "/nibiru/oracle/v1beta1/validators/{validator_addr}/miss";
  }

  // AggregatePrevote returns an aggregate prevote of a validator
  rpc AggregatePrevote(QueryAggregatePrevoteRequest)
      returns (QueryAggregatePrevoteResponse) {
    option (google.api.http).get =
        "/nibiru/oracle/v1beta1/validators/{validator_addr}/aggregate_prevote";
  }

  // AggregatePrevotes returns aggregate prevotes of all validators
  rpc AggregatePrevotes(QueryAggregatePrevotesRequest)
      returns (QueryAggregatePrevotesResponse) {
    option (google.api.http).get =
        "/nibiru/oracle/v1beta1/validators/aggregate_prevotes";
  }

  // AggregateVote returns an aggregate vote of a validator
  rpc AggregateVote(QueryAggregateVoteRequest)
      returns (QueryAggregateVoteResponse) {
    option (google.api.http).get =
        "/nibiru/oracle/v1beta1/valdiators/{validator_addr}/aggregate_vote";
  }

  // AggregateVotes returns aggregate votes of all validators
  rpc AggregateVotes(QueryAggregateVotesRequest)
      returns (QueryAggregateVotesResponse) {
    option (google.api.http).get =
        "/nibiru/oracle/v1beta1/validators/aggregate_votes";
  }

  // Params queries all parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/nibiru/oracle/v1beta1/params";
  }
}

// QueryExchangeRateRequest is the request type for the Query/ExchangeRate RPC
// method.
message QueryExchangeRateRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // pair defines the pair to query for.
  string pair = 1 [
    (gogoproto.customtype) =
        "github.com/NibiruChain/nibiru/v2/x/common/asset.Pair",
    (gogoproto.nullable) = false
  ];
}

// QueryExchangeRateResponse is response type for the
// Query/ExchangeRate RPC method.
message QueryExchangeRateResponse {
  // exchange_rate defines the exchange rate of assets voted by validators
  string exchange_rate = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// QueryExchangeRatesRequest is the request type for the Query/ExchangeRates RPC
// method.
message QueryExchangeRatesRequest {}

// QueryExchangeRatesResponse is response type for the
// Query/ExchangeRates RPC method.
message QueryExchangeRatesResponse {
  // exchange_rates defines a list of the exchange rate for all whitelisted
  // pairs.
  repeated nibiru.oracle.v1.ExchangeRateTuple exchange_rates = 1 [
    (gogoproto.castrepeated) = "ExchangeRateTuples",
    (gogoproto.nullable) = false
  ];
}

// QueryActivesRequest is the request type for the Query/Actives RPC method.
message QueryActivesRequest {}

// QueryActivesResponse is response type for the
// Query/Actives RPC method.
message QueryActivesResponse {
  // actives defines a list of the pair which oracle prices agreed upon.
  repeated string actives = 1 [
    (gogoproto.customtype) =
        "github.com/NibiruChain/nibiru/v2/x/common/asset.Pair",
    (gogoproto.nullable) = false
  ];
}

// QueryVoteTargetsRequest is the request type for the Query/VoteTargets RPC
// method.
message QueryVoteTargetsRequest {}

// QueryVoteTargetsResponse is response type for the
// Query/VoteTargets RPC method.
message QueryVoteTargetsResponse {
  // vote_targets defines a list of the pairs in which everyone
  // should vote in the current vote period.
  repeated string vote_targets = 1 [
    (gogoproto.customtype) =
        "github.com/NibiruChain/nibiru/v2/x/common/asset.Pair",
    (gogoproto.nullable) = false
  ];
}

// QueryFeederDelegationRequest is the request type for the
// Query/FeederDelegation RPC method.
message QueryFeederDelegationRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // validator defines the validator address to query for.
  string validator_addr = 1;
}

// QueryFeederDelegationResponse is response type for the
// Query/FeederDelegation RPC method.
message QueryFeederDelegationResponse {
  // feeder_addr defines the feeder delegation of a validator
  string feeder_addr = 1;
}

// QueryMissCounterRequest is the request type for the Query/MissCounter RPC
// method.
message QueryMissCounterRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // validator defines the validator address to query for.
  string validator_addr = 1;
}

// QueryMissCounterResponse is response type for the
// Query/MissCounter RPC method.
message QueryMissCounterResponse {
  // miss_counter defines the oracle miss counter of a validator
  uint64 miss_counter = 1;
}

// QueryAggregatePrevoteRequest is the request type for the
// Query/AggregatePrevote RPC method.
message QueryAggregatePrevoteRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // validator defines the validator address to query for.
  string validator_addr = 1;
}

// QueryAggregatePrevoteResponse is response type for the
// Query/AggregatePrevote RPC method.
message QueryAggregatePrevoteResponse {
  // aggregate_prevote defines oracle aggregate prevote submitted by a validator
  // in the current vote period
  nibiru.oracle.v1.AggregateExchangeRatePrevote aggregate_prevote = 1
      [ (gogoproto.nullable) = false ];
  ;
}

// QueryAggregatePrevotesRequest is the request type for the
// Query/AggregatePrevotes RPC method.
message QueryAggregatePrevotesRequest {}

// QueryAggregatePrevotesResponse is response type for the
// Query/AggregatePrevotes RPC method.
message QueryAggregatePrevotesResponse {
  // aggregate_prevotes defines all oracle aggregate prevotes submitted in the
  // current vote period
  repeated nibiru.oracle.v1.AggregateExchangeRatePrevote aggregate_prevotes = 1
      [ (gogoproto.nullable) = false ];
}

// QueryAggregateVoteRequest is the request type for the Query/AggregateVote RPC
// method.
message QueryAggregateVoteRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // validator defines the validator address to query for.
  string validator_addr = 1;
}

// QueryAggregateVoteResponse is response type for the
// Query/AggregateVote RPC method.
message QueryAggregateVoteResponse {
  // aggregate_vote defines oracle aggregate vote submitted by a validator in
  // the current vote period
  nibiru.oracle.v1.AggregateExchangeRateVote aggregate_vote = 1
      [ (gogoproto.nullable) = false ];
}

// QueryAggregateVotesRequest is the request type for the Query/AggregateVotes
// RPC method.
message QueryAggregateVotesRequest {}

// QueryAggregateVotesResponse is response type for the
// Query/AggregateVotes RPC method.
message QueryAggregateVotesResponse {
  // aggregate_votes defines all oracle aggregate votes submitted in the current
  // vote period
  repeated nibiru.oracle.v1.AggregateExchangeRateVote aggregate_votes = 1
      [ (gogoproto.nullable) = false ];
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  nibiru.oracle.v1.Params params = 1 [ (gogoproto.nullable) = false ];
}
