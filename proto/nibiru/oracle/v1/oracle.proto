syntax = "proto3";
package nibiru.oracle.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/NibiruChain/nibiru/v2/x/oracle/types";

// Params defines the module parameters for the x/oracle module.
message Params {
  option (gogoproto.equal) = true;

  // VotePeriod defines the number of blocks during which voting takes place.
  uint64 vote_period = 1 [ (gogoproto.moretags) = "yaml:\"vote_period\"" ];

  // VoteThreshold specifies the minimum proportion of votes that must be
  // received for a ballot to pass.
  string vote_threshold = 2 [
    (gogoproto.moretags) = "yaml:\"vote_threshold\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // RewardBand defines a maxium divergence that a price vote can have from the
  // weighted median in the ballot. If a vote lies within the valid range
  // defined by:
  //	μ := weightedMedian,
  //	validRange := μ ± (μ * rewardBand / 2),
  // then rewards are added to the validator performance.
  // Note that if the reward band is smaller than 1 standard
  // deviation, the band is taken to be 1 standard deviation.a price
  string reward_band = 3 [
    (gogoproto.moretags) = "yaml:\"reward_band\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // The set of whitelisted markets, or asset pairs, for the module.
  // Ex. '["unibi:uusd","ubtc:uusd"]'
  repeated string whitelist = 4 [
    (gogoproto.moretags) = "yaml:\"whitelist\"",
    (gogoproto.customtype) = "github.com/NibiruChain/nibiru/v2/x/common/asset.Pair"
  ];
  // SlashFraction returns the proportion of an oracle's stake that gets
  // slashed in the event of slashing. `SlashFraction` specifies the exact
  // penalty for failing a voting period.
  string slash_fraction = 5 [
    (gogoproto.moretags) = "yaml:\"slash_fraction\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // SlashWindow returns the number of voting periods that specify a
  // "slash window". After each slash window, all oracles that have missed more
  // than the penalty threshold are slashed. Missing the penalty threshold is
  // synonymous with submitting fewer valid votes than `MinValidPerWindow`.
  uint64 slash_window = 6 [ (gogoproto.moretags) = "yaml:\"slash_window\"" ];
  string min_valid_per_window = 7 [
    (gogoproto.moretags) = "yaml:\"min_valid_per_window\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // Amount of time to look back for TWAP calculations.
  // Ex: "900.000000069s" corresponds to 900 seconds and 69 nanoseconds in JSON.
  google.protobuf.Duration twap_lookback_window = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "twap_lookback_window,omitempty",
    (gogoproto.moretags) = "yaml:\"twap_lookback_window\""
  ];

  // The minimum number of voters (i.e. oracle validators) per pair for it to be
  // considered a passing ballot. Recommended at least 4.
  uint64 min_voters = 9 [ (gogoproto.moretags) = "yaml:\"min_voters\"" ];

  // The validator fee ratio that is given to validators every epoch.
  string validator_fee_ratio = 10 [
    (gogoproto.moretags) = "yaml:\"validator_fee_ratio\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  uint64 expiration_blocks = 11
      [ (gogoproto.moretags) = "yaml:\"expiration_blocks\"" ];
}

// Struct for aggregate prevoting on the ExchangeRateVote.
// The purpose of aggregate prevote is to hide vote exchange rates with hash
// which is formatted as hex string in
// SHA256("{salt}:({pair},{exchange_rate})|...|({pair},{exchange_rate}):{voter}")
message AggregateExchangeRatePrevote {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string hash = 1 [ (gogoproto.moretags) = "yaml:\"hash\"" ];
  string voter = 2 [ (gogoproto.moretags) = "yaml:\"voter\"" ];
  uint64 submit_block = 3 [ (gogoproto.moretags) = "yaml:\"submit_block\"" ];
}

// MsgAggregateExchangeRateVote - struct for voting on
// the exchange rates different assets.
message AggregateExchangeRateVote {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  repeated ExchangeRateTuple exchange_rate_tuples = 1 [
    (gogoproto.moretags) = "yaml:\"exchange_rate_tuples\"",
    (gogoproto.castrepeated) = "ExchangeRateTuples",
    (gogoproto.nullable) = false
  ];

  string voter = 2 [ (gogoproto.moretags) = "yaml:\"voter\"" ];
}

// ExchangeRateTuple - struct to store interpreted exchange rates data to store
message ExchangeRateTuple {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string pair = 1 [
    (gogoproto.moretags) = "yaml:\"pair\"",
    (gogoproto.customtype) =
        "github.com/NibiruChain/nibiru/v2/x/common/asset.Pair",
    (gogoproto.nullable) = false
  ];

  string exchange_rate = 2 [
    (gogoproto.moretags) = "yaml:\"exchange_rate\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message DatedPrice {
  string exchange_rate = 1 [
    (gogoproto.moretags) = "yaml:\"exchange_rate\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  uint64 created_block = 2 [ (gogoproto.moretags) = "yaml:\"created_block\"" ];
}

// Rewards defines a credit object towards validators
// which provide prices faithfully for different pairs.
message Rewards {
  // id uniquely identifies the rewards instance of the pair
  uint64 id = 1;
  // vote_periods defines the vote periods left in which rewards will be
  // distributed.
  uint64 vote_periods = 2;
  // Coins defines the amount of coins to distribute in a single vote period.
  repeated cosmos.base.v1beta1.Coin coins = 3 [ (gogoproto.nullable) = false ];
}
