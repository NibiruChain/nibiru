syntax = "proto3";
package nibiru.oracle.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "nibiru/oracle/v1/oracle.proto";

option go_package = "github.com/NibiruChain/nibiru/v2/x/oracle/types";

// Msg defines the oracle Msg service.
service Msg {
  // AggregateExchangeRatePrevote defines a method for submitting
  // aggregate exchange rate prevote
  rpc AggregateExchangeRatePrevote(MsgAggregateExchangeRatePrevote)
      returns (MsgAggregateExchangeRatePrevoteResponse) {
    option (google.api.http).post = "/nibiru/oracle/prevote";
  }

  // AggregateExchangeRateVote defines a method for submitting
  // aggregate exchange rate vote
  rpc AggregateExchangeRateVote(MsgAggregateExchangeRateVote)
      returns (MsgAggregateExchangeRateVoteResponse) {
    option (google.api.http).post = "/nibiru/oracle/vote";
  }

  // DelegateFeedConsent defines a method for delegating oracle voting rights
  // to another address known as a price feeder.
  // See https://github.com/NibiruChain/pricefeeder.
  rpc DelegateFeedConsent(MsgDelegateFeedConsent)
      returns (MsgDelegateFeedConsentResponse) {
    option (google.api.http).post = "/nibiru/oracle/feeder-delegate";
  }

  rpc EditOracleParams(MsgEditOracleParams)
      returns (MsgEditOracleParamsResponse) {
    option (google.api.http).post = "/nibiru/oracle/edit-oracle-params";
  }
}

// MsgAggregateExchangeRatePrevote represents a message to submit
// aggregate exchange rate prevote.
message MsgAggregateExchangeRatePrevote {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string hash = 1 [ (gogoproto.moretags) = "yaml:\"hash\"" ];
  // Feeder is the Bech32 address of the price feeder. A validator may
  // specify multiple price feeders by delegating them consent. The validator
  // address is also a valid feeder by default.
  string feeder = 2 [ (gogoproto.moretags) = "yaml:\"feeder\"" ];
  // Validator is the Bech32 address to which the prevote will be credited.
  string validator = 3 [ (gogoproto.moretags) = "yaml:\"validator\"" ];
}

// MsgAggregateExchangeRatePrevoteResponse defines the
// Msg/AggregateExchangeRatePrevote response type.
message MsgAggregateExchangeRatePrevoteResponse {}

// MsgAggregateExchangeRateVote represents a message to submit
// aggregate exchange rate vote.
message MsgAggregateExchangeRateVote {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string salt = 1 [ (gogoproto.moretags) = "yaml:\"salt\"" ];
  string exchange_rates = 2
      [ (gogoproto.moretags) = "yaml:\"exchange_rates\"" ];
  // Feeder is the Bech32 address of the price feeder. A validator may
  // specify multiple price feeders by delegating them consent. The validator
  // address is also a valid feeder by default.
  string feeder = 3 [ (gogoproto.moretags) = "yaml:\"feeder\"" ];
  // Validator is the Bech32 address to which the vote will be credited.
  string validator = 4 [ (gogoproto.moretags) = "yaml:\"validator\"" ];
}

// MsgAggregateExchangeRateVoteResponse defines the
// Msg/AggregateExchangeRateVote response type.
message MsgAggregateExchangeRateVoteResponse {}

// MsgDelegateFeedConsent represents a message to delegate oracle voting rights
// to another address.
message MsgDelegateFeedConsent {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string operator = 1 [ (gogoproto.moretags) = "yaml:\"operator\"" ];
  string delegate = 2 [ (gogoproto.moretags) = "yaml:\"delegate\"" ];
}

// MsgDelegateFeedConsentResponse defines the Msg/DelegateFeedConsent response
// type.
message MsgDelegateFeedConsentResponse {}

// MsgEditOracleParams: gRPC tx message for updating the x/oracle module params
// [SUDO] Only callable by sudoers.
message MsgEditOracleParams {
  string sender = 1;

  string vote_period = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = true
  ];

  // vote_threshold: [cosmossdk.io/math.LegacyDec] TODO:
  string vote_threshold = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];

  // reward_band: [cosmossdk.io/math.LegacyDec] TODO:
  string reward_band = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];

  repeated string whitelist = 5 [ (gogoproto.nullable) = true ];

  // slash_fraction: [cosmossdk.io/math.LegacyDec] TODO:
  string slash_fraction = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];

  string slash_window = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = true
  ];

  // min_valid_per_window: [cosmossdk.io/math.LegacyDec] TODO:
  string min_valid_per_window = 8 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];

  string twap_lookback_window = 9 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = true
  ];

  string min_voters = 10 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = true
  ];

  // VoteThreshold: [cosmossdk.io/math.LegacyDec] TODO:
  string validator_fee_ratio = 11 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];
}

// MsgEditOracleParamsResponse defines the Msg/EditOracleParams response
// type.
message MsgEditOracleParamsResponse { nibiru.oracle.v1.Params new_params = 1; }
