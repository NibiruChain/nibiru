name: "Integration tests"

on:
  workflow_dispatch: # Runs on manual calls
  schedule:
    - cron: "0 0 * * *" # Runs automatically every day
  push:
    branches: ["main"]
  pull_request:

# Allow concurrent runs on main/release branches but isolates other branches
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: ${{ ! (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')) }}

jobs:
  heavy-tests:
    # Job that runs all tests and publishes code coverage reports.
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: "Check for Go-related changes"
        id: check_nibiru_go
        uses: dorny/paths-filter@v3
        with:
          filters: |
            nibiru-go:
              - "app/**/*.go"
              - "cmd/**/*.go"
              - "eth/**/*.go"
              - "gosdk/**/*.go"
              - "x/**/*.go"
              - "**/*.proto"
              - "go.mod"
              - "go.sum"
              - "contrib/docker-compose/*"

      - name: Set up Go
        if: steps.check_nibiru_go.outputs.nibiru-go == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: 1.24
          cache: true

      # Use GitHub actions output paramters to get go paths. For more info, see
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions
      - name: "Set output variables for go cache"
        if: steps.check_nibiru_go.outputs.nibiru-go == 'true'
        id: go-cache-paths
        run: |
          echo "go-build-cache=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod-cache=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT

      - name: "Go build cache"
        if: steps.check_nibiru_go.outputs.nibiru-go == 'true'
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build-cache }}
          key: go-build-cache-${{ hashFiles('**/go.sum') }}

      - name: "Go mod cache"
        if: steps.check_nibiru_go.outputs.nibiru-go == 'true'
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod-cache }}
          key: go-mod-cache-${{ hashFiles('**/go.sum') }}

      - name: "Install just"
        # casey/just: https://just.systems/man/en/chapter_6.html
        # taiki-e/install-action: https://github.com/taiki-e/install-action
        uses: taiki-e/install-action@just

      - name: "Run all heavy tests."
        if: steps.check_nibiru_go.outputs.nibiru-go == 'true'
        run: just test-cover-heavy

      - name: "Merge coverage reports with gocovermerge"
        if: steps.check_nibiru_go.outputs.nibiru-go == 'true'
        run: |
          go install github.com/Unique-Divine/jiyuu/gocovmerge@latest
          gocovmerge -o coverage.out \
            coverage.group1.out coverage.group2.out coverage.group3.out
      
      - name: "Upload coverage reports to Codecov"
        if: steps.check_nibiru_go.outputs.nibiru-go == 'true'
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        # Docs on usable "with" flags for codecov/codecov-action v5:
        # https://github.com/codecov/codecov-action?tab=readme-ov-file#example-workflowyml-with-codecov-action
        with:
          disable_search: true
          files: coverage.out
